{"version":3,"file":"in-memory-todo-repository.js","sourceRoot":"","sources":["in-memory-todo-repository.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,0DAAiD;AACjD,4DAAyD;AACzD,+FAAyF;AACzF,gDAA6C;AAK7C,IAAa,sBAAsB,GAAnC,MAAa,sBAAsB;IAM/B,YAAmB,aAA4B;QAE3C,mBAAK,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;QACxE,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QAEpC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IACrB,CAAC;IAGM,MAAM;QAET,MAAM,MAAM,GAAG,IAAI,KAAK,EAAQ,CAAC;QAEjC,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,MAAM,EAC7B;YACI,MAAM,CAAC,IAAI,CAAC,WAAI,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SAC7E;QAED,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;IACjE,CAAC;IAEM,GAAG,CAAC,EAAU;QAEjB,mBAAK,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;QAElD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;YAChB,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,gDAAqB,CAAC,EAAE,CAAC,CAAC,CAAC;QAEzD,MAAM,MAAM,GAAG,WAAI,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;QAC3E,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC;IAEM,IAAI,CAAC,IAAU;QAElB,mBAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,cAAc,EAAE,CAAC,YAAY,CAAC,WAAI,CAAC,CAAC;QAExD,MAAM,IAAI,GAAQ,IAAI,CAAC,SAAS,EAAE,CAAC;QAEnC,MAAM,aAAa,GAAiB;YAChC,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,OAAO,EAAE,IAAI,CAAC,cAAc;YAC5B,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,IAAI;YACJ,KAAK,EAAE,IAAI,CAAC,MAAM;SACrB,CAAC;QAEF,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC;QAE3C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC;QAErC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAEO,MAAM,CAAC,EAAU;QAErB,mBAAK,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;QAEtD,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;YACf,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAE3B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;CACJ,CAAA;AApEY,sBAAsB;IADlC,eAAM,CAAC,eAAe,CAAC;;GACX,sBAAsB,CAoElC;AApEY,wDAAsB","sourcesContent":["import { TodoRepository } from \"../../domain/repositories/todo-repository\";\r\nimport { given } from \"@nivinjoseph/n-defensive\";\r\nimport { Todo } from \"../../domain/aggregates/todo/todo\";\r\nimport { TodoNotFoundException } from \"../../domain/exceptions/todo-not-found-exception\";\r\nimport { inject } from \"@nivinjoseph/n-ject\";\r\nimport { DomainContext } from \"@nivinjoseph/n-domain\";\r\n\r\n\r\n@inject(\"DomainContext\")\r\nexport class InMemoryTodoRepository implements TodoRepository\r\n{\r\n    private readonly _domainContext: DomainContext;\r\n    private readonly _todos: { [index: string]: StorageModel };\r\n    \r\n    \r\n    public constructor(domainContext: DomainContext)\r\n    {\r\n        given(domainContext, \"domainContext\").ensureHasValue().ensureIsObject();\r\n        this._domainContext = domainContext;\r\n        \r\n        this._todos = {};\r\n    }\r\n    \r\n    \r\n    public getAll(): Promise<ReadonlyArray<Todo>>\r\n    {\r\n        const result = new Array<Todo>();\r\n\r\n        for (const key in this._todos)\r\n        {\r\n            result.push(Todo.deserialize(this._domainContext, this._todos[key].data));\r\n        }\r\n\r\n        return Promise.resolve(result.orderByDesc(t => t.updatedAt));\r\n    }\r\n    \r\n    public get(id: string): Promise<Todo>\r\n    {\r\n        given(id, \"id\").ensureHasValue().ensureIsString();\r\n        \r\n        if (!this._todos[id])\r\n            return Promise.reject(new TodoNotFoundException(id));\r\n        \r\n        const result = Todo.deserialize(this._domainContext, this._todos[id].data);\r\n        return Promise.resolve(result);\r\n    }\r\n    \r\n    public save(todo: Todo): Promise<void>\r\n    {\r\n        given(todo, \"todo\").ensureHasValue().ensureIsType(Todo);\r\n\r\n        const data: any = todo.serialize();\r\n\r\n        const storageEntity: StorageModel = {\r\n            id: todo.id,\r\n            version: todo.currentVersion,\r\n            updatedAt: todo.updatedAt,\r\n            data,\r\n            query: data.$state\r\n        };\r\n\r\n        console.log(JSON.stringify(storageEntity));\r\n        \r\n        this._todos[todo.id] = storageEntity;\r\n        \r\n        return Promise.resolve();\r\n    }\r\n    \r\n    public  delete(id: string): Promise<void>\r\n    {\r\n        given(id, \"string\").ensureHasValue().ensureIsString();\r\n\r\n        if (this._todos[id])\r\n            delete this._todos[id];\r\n        \r\n        return Promise.resolve();\r\n    }\r\n}\r\n\r\n\r\ninterface StorageModel\r\n{\r\n    id: string;\r\n    version: number;\r\n    updatedAt: number;\r\n    data: object;\r\n    query: object;\r\n}"]}