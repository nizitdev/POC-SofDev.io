{"version":3,"file":"db-todo-repository.js","sourceRoot":"","sources":["db-todo-repository.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAEA,0DAAiD;AACjD,gDAA6C;AAC7C,4DAAyD;AAEzD,+FAAyF;AAIzF,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;IAMzB,YAAmB,EAAM,EAAE,aAA4B;QAEnD,mBAAK,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;QAClD,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QAEd,mBAAK,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;QACxE,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACxC,CAAC;IAGY,MAAM;;YAEf,MAAM,GAAG,GAAG,6CAA6C,CAAC;YAC1D,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,YAAY,CAAM,GAAG,CAAC,CAAC;YAC1D,OAAO,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,WAAI,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACpF,CAAC;KAAA;IAEY,GAAG,CAAC,EAAU;;YAEvB,mBAAK,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;YAElD,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC;YACf,MAAM,GAAG,GAAG,sCAAsC,CAAC;YACnD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,YAAY,CAAM,GAAG,EAAE,EAAE,CAAC,CAAC;YACzD,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC;gBACxB,MAAM,IAAI,gDAAqB,CAAC,EAAE,CAAC,CAAC;YAExC,OAAO,WAAI,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACtE,CAAC;KAAA;IAEY,IAAI,CAAC,IAAU;;YAExB,mBAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,cAAc,EAAE,CAAC,YAAY,CAAC,WAAI,CAAC,CAAC;YAExD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACrD,IAAI,MAAM,IAAI,IAAI,CAAC,UAAU,EAC7B;gBACI,MAAM,GAAG,GAAG;;0DAEkC,CAAC;gBAE/C,MAAM,MAAM,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;gBAEnG,MAAM,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,MAAM,CAAC,CAAC;aACjD;iBAED;gBACI,MAAM,GAAG,GAAG;;mDAE2B,CAAC;gBAExC,MAAM,MAAM,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;gBAEzF,MAAM,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,MAAM,CAAC,CAAC;aACjD;QACL,CAAC;KAAA;IAEY,MAAM,CAAC,EAAU;;YAE1B,mBAAK,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;YAElD,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC;YACf,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YAChD,IAAI,CAAC,MAAM;gBACP,OAAO;YAEX,MAAM,GAAG,GAAG,iCAAiC,CAAC;YAE9C,MAAM,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAC3C,CAAC;KAAA;IAGa,iBAAiB,CAAC,EAAU;;YAEtC,MAAM,GAAG,GAAG,mDAAmD,CAAC;YAEhE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,YAAY,CAAM,GAAG,EAAE,EAAE,CAAC,CAAC;YACzD,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;QACjC,CAAC;KAAA;CACJ,CAAA;AArFY,gBAAgB;IAD5B,eAAM,CAAC,IAAI,EAAE,eAAe,CAAC;;GACjB,gBAAgB,CAqF5B;AArFY,4CAAgB","sourcesContent":["import { TodoRepository } from \"../../domain/repositories/todo-repository\";\nimport { Db } from \"@nivinjoseph/n-data\";\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport { inject } from \"@nivinjoseph/n-ject\";\nimport { Todo } from \"../../domain/aggregates/todo/todo\";\nimport { DomainContext } from \"@nivinjoseph/n-domain\";\nimport { TodoNotFoundException } from \"../../domain/exceptions/todo-not-found-exception\";\n\n\n@inject(\"Db\", \"DomainContext\")\nexport class DbTodoRepository implements TodoRepository\n{\n    private readonly _db: Db;\n    private readonly _domainContext: DomainContext;\n\n\n    public constructor(db: Db, domainContext: DomainContext)\n    {\n        given(db, \"db\").ensureHasValue().ensureIsObject();\n        this._db = db;\n        \n        given(domainContext, \"domainContext\").ensureHasValue().ensureIsObject();\n        this._domainContext = domainContext;\n    }\n\n\n    public async getAll(): Promise<ReadonlyArray<Todo>>\n    {\n        const sql = `select data from todos order by created_at;`;\n        const queryResult = await this._db.executeQuery<any>(sql);\n        return queryResult.rows.map(t => Todo.deserialize(this._domainContext, t.data));\n    }\n    \n    public async get(id: string): Promise<Todo>\n    {\n        given(id, \"id\").ensureHasValue().ensureIsString();\n\n        id = id.trim();\n        const sql = `select data from todos where id = ?;`;\n        const result = await this._db.executeQuery<any>(sql, id);\n        if (result.rows.length === 0)\n            throw new TodoNotFoundException(id);\n        \n        return Todo.deserialize(this._domainContext, result.rows[0].data);\n    }\n\n    public async save(todo: Todo): Promise<void>\n    {\n        given(todo, \"todo\").ensureHasValue().ensureIsType(Todo);\n\n        const exists = await this.checkIfTodoExists(todo.id);\n        if (exists && todo.hasChanges)\n        {\n            const sql = `update todos \n                            set version = ?, updated_at = ?, data = ? \n                            where id = ? and version = ?;`;\n\n            const params = [todo.currentVersion, todo.updatedAt, todo.serialize(), todo.id, todo.retroVersion];\n\n            await this._db.executeCommand(sql, ...params);\n        }\n        else\n        {\n            const sql = `insert into todos \n                            (id, version, created_at, updated_at, data) \n                            values(?, ?, ?, ?, ?);`;\n\n            const params = [todo.id, todo.version, todo.createdAt, todo.updatedAt, todo.serialize()];\n\n            await this._db.executeCommand(sql, ...params);\n        }\n    }\n\n    public async delete(id: string): Promise<void>\n    {\n        given(id, \"id\").ensureHasValue().ensureIsString();\n\n        id = id.trim();\n        const exists = await this.checkIfTodoExists(id);\n        if (!exists)\n            return;\n        \n        const sql = `delete from todos where id = ?;`;\n\n        await this._db.executeCommand(sql, id);\n    }\n\n\n    private async checkIfTodoExists(id: string): Promise<boolean>\n    {\n        const sql = `select exists (select 1 from todos where id = ?);`;\n\n        const result = await this._db.executeQuery<any>(sql, id);\n        return result.rows[0].exists;\n    }\n}"]}