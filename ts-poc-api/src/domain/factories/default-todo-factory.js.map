{"version":3,"file":"default-todo-factory.js","sourceRoot":"","sources":["default-todo-factory.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AACA,0DAAiD;AACjD,8BAA4B;AAC5B,kDAA+C;AAC/C,gDAA6C;AAC7C,oDAAoE;AACpE,yEAAqE;AAKrE,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;IAM3B,YAAmB,aAA4B,EAAE,QAAwB;QAErE,mBAAK,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;QACxE,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QAEpC,mBAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;QAC9D,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC9B,CAAC;IAGY,MAAM,CAAC,KAAa,EAAE,WAAmB;;YAElD,mBAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;YACxD,mBAAK,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC,cAAc,EAAE,CAAC;YAEnD,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;YACrB,WAAW,GAAG,WAAW,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;YAC5F,MAAM,KAAK,GAAG,IAAI,0BAAW,CAAC,EAAC,eAAe,EAAE,IAAI,EAAC,EAAE,uBAAY,CAAC,UAAU,EAAE,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;YACtG,MAAM,IAAI,GAAG,IAAI,WAAI,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;YACpD,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAChC,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC7C,CAAC;KAAA;CACJ,CAAA;AA5BY,kBAAkB;IAD9B,eAAM,CAAC,eAAe,EAAE,gBAAgB,CAAC;;GAC7B,kBAAkB,CA4B9B;AA5BY,gDAAkB","sourcesContent":["import { TodoFactory } from \"./todo-factory\";\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport \"@nivinjoseph/n-ext\";\nimport { Todo } from \"../aggregates/todo/todo\";\nimport { inject } from \"@nivinjoseph/n-ject\";\nimport { DomainContext, DomainHelper } from \"@nivinjoseph/n-domain\";\nimport { TodoCreated } from \"../aggregates/todo/events/todo-created\";\nimport { TodoRepository } from \"../repositories/todo-repository\";\n\n\n@inject(\"DomainContext\", \"TodoRepository\")\nexport class DefaultTodoFactory implements TodoFactory\n{\n    private readonly _domainContext: DomainContext;\n    private readonly _todoRepo: TodoRepository;\n    \n    \n    public constructor(domainContext: DomainContext, todoRepo: TodoRepository)\n    {\n        given(domainContext, \"domainContext\").ensureHasValue().ensureIsObject();\n        this._domainContext = domainContext;\n        \n        given(todoRepo, \"todoRepo\").ensureHasValue().ensureIsObject();\n        this._todoRepo = todoRepo;\n    }\n    \n    \n    public async create(title: string, description: string): Promise<Todo>\n    {\n        given(title, \"title\").ensureHasValue().ensureIsString();\n        given(description, \"description\").ensureIsString();\n        \n        title = title.trim();\n        description = description && !description.isEmptyOrWhiteSpace() ? description.trim() : null;\n        const event = new TodoCreated({$isCreatedEvent: true}, DomainHelper.generateId(), title, description);\n        const todo = new Todo(this._domainContext, [event]);\n        await this._todoRepo.save(todo);\n        return await this._todoRepo.get(todo.id);\n    }\n}"]}