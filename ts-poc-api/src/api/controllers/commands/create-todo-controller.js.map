{"version":3,"file":"create-todo-controller.js","sourceRoot":"","sources":["create-todo-controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,8CAAgE;AAChE,oCAAoC;AACpC,gDAA6C;AAC7C,0DAAiD;AAEjD,wDAA4D;AAC5D,gFAA4E;AAM5E,IAAa,oBAAoB,GAAjC,MAAa,oBAAqB,SAAQ,kBAAU;IAKhD,YAAmB,WAAwB;QAEvC,KAAK,EAAE,CAAC;QAER,mBAAK,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;QACpE,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACpC,CAAC;IAGY,OAAO,CAAC,KAAY;;YAE7B,mBAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;YAExD,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAE1B,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;YAC5E,OAAO;gBACH,EAAE,EAAE,IAAI,CAAC,EAAE;gBACX,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,WAAW,EAAE,IAAI,CAAC,WAAW;aAChC,CAAC;QACN,CAAC;KAAA;IAGO,aAAa,CAAC,KAAY;QAE9B,IAAI,SAAS,GAAG,IAAI,sBAAS,EAAS,CAAC;QAEvC,SAAS,CAAC,GAAG,CAAS,OAAO,CAAC;aACzB,UAAU,EAAE;aACZ,cAAc,EAAE;aAChB,iBAAiB,CAAC,mBAAM,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;QAEjD,SAAS,CAAC,GAAG,CAAS,aAAa,CAAC;aAC/B,UAAU,EAAE;aACZ,cAAc,EAAE;aAChB,iBAAiB,CAAC,mBAAM,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;QAEjD,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAE1B,IAAI,SAAS,CAAC,SAAS;YACnB,MAAM,IAAI,0CAAmB,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IACxD,CAAC;CACJ,CAAA;AAjDY,oBAAoB;IAHhC,aAAK,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC;IAChC,eAAO;IACP,eAAM,CAAC,aAAa,CAAC;;GACT,oBAAoB,CAiDhC;AAjDY,oDAAoB","sourcesContent":["import { Controller, command, route } from \"@nivinjoseph/n-web\";\nimport * as Routes from \"../routes\";\nimport { inject } from \"@nivinjoseph/n-ject\";\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport { TodoFactory } from \"../../../domain/factories/todo-factory\";\nimport { Validator, strval } from \"@nivinjoseph/n-validate\";\nimport { ValidationException } from \"../../exceptions/validation-exception\";\n\n\n@route(Routes.command.createTodo)\n@command\n@inject(\"TodoFactory\") \nexport class CreateTodoController extends Controller\n{\n    private readonly _todoFactory: TodoFactory;\n\n\n    public constructor(todoFactory: TodoFactory)\n    {\n        super();\n        \n        given(todoFactory, \"todoFactory\").ensureHasValue().ensureIsObject();\n        this._todoFactory = todoFactory;\n    }\n    \n    \n    public async execute(model: Model): Promise<object>\n    {\n        given(model, \"model\").ensureHasValue().ensureIsObject();\n\n        this.validateModel(model);\n        \n        const todo = await this._todoFactory.create(model.title, model.description);\n        return {\n            id: todo.id,\n            title: todo.title,\n            description: todo.description,\n            isCompleted: todo.isCompleted\n        };\n    }\n    \n    \n    private validateModel(model: Model): void\n    {\n        let validator = new Validator<Model>();\n\n        validator.for<string>(\"title\")\n            .isRequired()\n            .ensureIsString()\n            .useValidationRule(strval.hasMaxLength(128));\n\n        validator.for<string>(\"description\")\n            .isOptional()\n            .ensureIsString()\n            .useValidationRule(strval.hasMaxLength(500));\n\n        validator.validate(model);\n\n        if (validator.hasErrors)\n            throw new ValidationException(validator.errors);\n    }\n}\n\n\ninterface Model\n{\n    title: string;\n    description?: string;\n}"]}