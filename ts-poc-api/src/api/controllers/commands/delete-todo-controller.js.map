{"version":3,"file":"delete-todo-controller.js","sourceRoot":"","sources":["delete-todo-controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,8CAAgE;AAChE,oCAAoC;AACpC,gDAA6C;AAE7C,0DAAiD;AACjD,wDAAoD;AACpD,gFAA4E;AAM5E,IAAa,oBAAoB,GAAjC,MAAa,oBAAqB,SAAQ,kBAAU;IAKhD,YAAmB,cAA8B;QAE7C,KAAK,EAAE,CAAC;QAER,mBAAK,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;QAC1E,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;IAC1C,CAAC;IAGY,OAAO,CAAC,KAAY;;YAE7B,mBAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;YAExD,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAE1B,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAChD,CAAC;KAAA;IAGO,aAAa,CAAC,KAAY;QAE9B,IAAI,SAAS,GAAG,IAAI,sBAAS,EAAS,CAAC;QAEvC,SAAS,CAAC,GAAG,CAAS,IAAI,CAAC;aACtB,UAAU,EAAE;aACZ,cAAc,EAAE,CAAC;QAEtB,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAE1B,IAAI,SAAS,CAAC,SAAS;YACnB,MAAM,IAAI,0CAAmB,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IACxD,CAAC;CACJ,CAAA;AArCY,oBAAoB;IAHhC,aAAK,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC;IAChC,eAAO;IACP,eAAM,CAAC,gBAAgB,CAAC;;GACZ,oBAAoB,CAqChC;AArCY,oDAAoB","sourcesContent":["import { Controller, command, route } from \"@nivinjoseph/n-web\";\nimport * as Routes from \"../routes\";\nimport { inject } from \"@nivinjoseph/n-ject\";\nimport { TodoRepository } from \"../../../domain/repositories/todo-repository\";\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport { Validator } from \"@nivinjoseph/n-validate\";\nimport { ValidationException } from \"../../exceptions/validation-exception\";\n\n\n@route(Routes.command.deleteTodo)\n@command\n@inject(\"TodoRepository\")\nexport class DeleteTodoController extends Controller\n{\n    private readonly _todoRepository: TodoRepository;\n\n\n    public constructor(todoRepository: TodoRepository)\n    {\n        super();\n        \n        given(todoRepository, \"todoRepository\").ensureHasValue().ensureIsObject();\n        this._todoRepository = todoRepository;\n    }\n\n\n    public async execute(model: Model): Promise<void>\n    {\n        given(model, \"model\").ensureHasValue().ensureIsObject();\n\n        this.validateModel(model);\n\n        await this._todoRepository.delete(model.id);\n    }\n\n\n    private validateModel(model: Model): void\n    {\n        let validator = new Validator<Model>();\n\n        validator.for<string>(\"id\")\n            .isRequired()\n            .ensureIsString();\n\n        validator.validate(model);\n\n        if (validator.hasErrors)\n            throw new ValidationException(validator.errors);\n    }\n}\n\n\ninterface Model\n{\n    id: string;\n}"]}