{"version":3,"file":"exception.js","sourceRoot":"","sources":["../src/exception.ts"],"names":[],"mappings":";;AAAA,8BAA4B;AAE5B,MAAa,SAAU,SAAQ,KAAK;IAQhC,IAAW,IAAI,KAAa,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAGhD,IAAW,cAAc,KAAY,OAAO,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;IAKnE,YAAmB,OAAe,EAAE,cAAsB;QAEtD,IAAI,OAAO,IAAI,IAAI,IAAI,OAAO,CAAC,mBAAmB,EAAE;YAChD,OAAO,GAAG,QAAQ,CAAC;QAEvB,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QAEvB,IAAI,CAAC,KAAK,GAAY,IAAK,CAAC,WAAW,EAAE,CAAC;QAC1C,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC;IAiBlE,CAAC;CAiDJ;AA3FD,8BA2FC","sourcesContent":["import \"@nivinjoseph/n-ext\";\n\nexport class Exception extends Error\n{\n    private readonly _name: string;\n    // private readonly _message: string;\n    // private readonly _stack: string;\n    private readonly _innerException: Error;\n    \n    \n    public get name(): string { return this._name; }\n    // public get message(): string { return this._message; }\n    // public get stack(): string { return this._stack; }\n    public get innerException(): Error { return this._innerException; }\n    \n    \n    public constructor(message: string);\n    public constructor(message: string, innerException: Error);\n    public constructor(message: string, innerException?: Error)\n    {\n        if (message == null || message.isEmptyOrWhiteSpace())\n            message = \"<none>\";\n\n        super(message);\n        this.message = message;\n        \n        this._name = (<Object>this).getTypeName();\n        this._innerException = innerException ? innerException : null;\n        \n        // if ((<any>message) instanceof Error)\n        // {\n        //     let err = (<any>message) as Error;\n        //     this._message = err.message;\n        //     this._stack = err.stack;\n        // }\n        // else\n        // {\n        //     if (message == null || message.isEmptyOrWhiteSpace())\n        //         message = \"<none>\";\n\n        //     this._message = message;\n        //     this._stack = this.generateStackTrace();\n        //     this._innerException = innerException ? innerException : null;\n        // }\n    }\n    \n    // public static fromError(error: Error): Exception\n    // {\n    //     return new Exception(error as any);\n    // }\n    \n    // public toString(): string\n    // {\n    //     // return \"{0}: {1}\".format(this._name, this.message);\n        \n    //     let log = this.stack;\n    //     if (this.innerException != null)\n    //         log = log + \"\\n\" + \"Inner Exception --> \" + this.innerException.toString();\n\n    //     return log;\n    // }\n    \n    // public toLogString(): string\n    // {\n    //     let log = this.stack;\n    //     if (this.innerException != null)\n    //         log = log + \"\\n\" + \"Inner Exception --> \" +\n    //             (this.innerException instanceof Exception\n    //                 ? (<Exception>this.innerException).toLogString()\n    //                 : this.innerException.stack);\n        \n    //     return log;\n    // }\n    \n    \n    // private generateStackTrace(): string\n    // {\n    //     let err = new Error();\n    //     let splitted = err.stack.split(/\\r?\\n/g);\n    //     let mark = \"at new {0}\".format(this.name);\n    //     let index = null;\n    //     for (let i = 0; i < splitted.length; i++)\n    //     {\n    //         if (splitted[i].trim().startsWith(mark))\n    //         {\n    //             index = i + 1;\n    //             break;\n    //         }\n    //     }\n    //     splitted = index != null ? splitted.skip(index) : splitted.skip(1);\n    //     splitted = [this.toString()].concat(splitted);\n    //     return splitted.join(\"\\n\");\n    // }\n}"]}