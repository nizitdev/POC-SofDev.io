{"version":3,"file":"json-web-token.js","sourceRoot":"","sources":["../../src/api-security/json-web-token.ts"],"names":[],"mappings":"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","sourcesContent":["import { Claim } from \"./claim\";\nimport { InvalidOperationException } from \"@nivinjoseph/n-exception\";\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport \"@nivinjoseph/n-ext\";\nimport { InvalidTokenException } from \"./invalid-token-exception\";\nimport { AlgType } from \"./alg-type\";\nimport { Hmac } from \"./../crypto/hmac\";\nimport { DigitalSignature } from \"./../crypto/digital-signature\";\nimport { ExpiredTokenException } from \"./expired-token-exception\";\n\n\n// public\nexport class JsonWebToken\n{\n    private readonly _issuer: string;\n    private readonly _algType: AlgType;\n    private readonly _key: string;\n    private readonly _isfullKey: boolean;\n    private readonly _expiry: number;\n    private readonly _claims: Array<Claim>;\n\n    \n    public get issuer(): string { return this._issuer; }\n    public get algType(): AlgType { return this._algType; }\n    public get key(): string { return this._key; }\n    public get canGenerateToken(): boolean { return this._isfullKey; }\n    public get expiry(): number { return this._expiry; }\n    public get isExpired(): boolean { return this._expiry <= Date.now(); }\n    public get claims(): ReadonlyArray<Claim> { return this._claims; }\n    \n    \n    private constructor(issuer: string, algType: AlgType, key: string, isFullKey: boolean, expiry: number,\n        claims: Array<Claim>)\n    {\n        given(issuer, \"issuer\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        given(algType, \"algType\").ensureHasValue().ensure(t => t === 1 || t === 2);\n        given(key, \"key\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        given(isFullKey, \"isFullKey\").ensureHasValue();\n        given(expiry, \"expiry\").ensureHasValue();\n        given(claims, \"claims\")\n            .ensureHasValue()\n            .ensure(t => t.length > 0);\n        \n        this._issuer = issuer.trim();\n        this._algType = algType;\n        this._key = key.trim();\n        this._isfullKey = isFullKey;\n        this._expiry = expiry;\n        this._claims = [...claims];\n    }\n    \n    public async generateToken(): Promise<string>\n    {\n        if (!this._isfullKey)\n            throw new InvalidOperationException(\"generating token using an instance created from token\");    \n        \n        let header: Header = {\n            iss: this._issuer,\n            alg: this._algType,\n            exp: this._expiry\n        };\n        \n        let body: any = {};\n        this._claims.forEach(t => body[t.type] = t.value);\n        \n        let headerAndBody = this.toHex(header) + \".\" + this.toHex(body);\n        \n        let signature = this._algType === AlgType.hmac\n            ? await Hmac.create(this._key, headerAndBody)\n            : await DigitalSignature.sign(this._key, headerAndBody);\n        \n        let token = headerAndBody + \".\" + signature;\n        return token;\n    }\n    \n    \n    public static fromClaims(issuer: string, algType: AlgType, key: string, expiry: number,\n        claims: Array<Claim>): JsonWebToken\n    {\n        return new JsonWebToken(issuer, algType, key, true, expiry, claims);\n    }\n    \n    public static async fromToken(issuer: string, algType: AlgType, key: string, token: string): Promise<JsonWebToken>\n    {\n        given(issuer, \"issuer\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        given(algType, \"algType\").ensureHasValue().ensure(t => t === 1 || t === 2);\n        given(key, \"key\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        given(token, \"token\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        \n        issuer = issuer.trim();\n        key = key.trim();\n        token = token.trim();\n        \n        let tokenSplitted = token.split(\".\");\n        if (tokenSplitted.length !== 3)\n            throw new InvalidTokenException(token, \"format is incorrect\");\n        \n        let headerString = tokenSplitted[0];\n        let bodyString = tokenSplitted[1];\n        let signature = tokenSplitted[2];\n        \n        let header: Header = JsonWebToken.toObject(headerString) as Header;\n        let body: any = JsonWebToken.toObject(bodyString);\n        \n        if (header.iss === undefined || header.iss === null)\n            throw new InvalidTokenException(token, \"iss was not present\");\n        \n        if (header.iss !== issuer)\n            throw new InvalidTokenException(token,\n                `iss was expected to be '${issuer}' but instead was '${header.iss}'`);    \n        \n        if (header.alg === undefined || header.alg === null)\n            throw new InvalidTokenException(token, \"alg was not present\");\n        \n        if (header.alg !== algType)\n            throw new InvalidTokenException(token,\n                `alg was expected to be '${algType}' but instead was '${header.alg}'`);    \n        \n        if (header.exp === undefined || header.exp === null)\n            throw new InvalidTokenException(token, \"exp was not present\");\n        \n        if (typeof (header.exp) !== \"number\")\n            throw new InvalidTokenException(token, `exp value '${header.exp}' is invalid`);\n        \n        if (header.exp <= Date.now())\n            throw new ExpiredTokenException(token);\n        \n        if (algType === AlgType.hmac)\n        {\n            let computedSignature = await Hmac.create(key, headerString + \".\" + bodyString);\n            if (computedSignature !== signature)\n                throw new InvalidTokenException(token, \"signature could not be verified\");    \n        }   \n        else\n        {\n            let verification = await DigitalSignature.verify(key, headerString + \".\" + bodyString, signature);\n            if (!verification)\n                throw new InvalidTokenException(token, \"signature could not be verified\");  \n        }    \n        \n        let claims = new Array<Claim>();\n        for (let item in body)\n            claims.push(new Claim(item, body[item]));    \n        \n        return new JsonWebToken(issuer, algType, key, false, header.exp, claims);\n    }\n    \n    private toHex(obj: object): string\n    {\n        let json = JSON.stringify(obj);\n        let hex = Buffer.from(json, \"utf8\").toString(\"hex\");\n        return hex.toUpperCase();\n    }\n    \n    private static toObject(hex: string): object\n    {\n        let json = Buffer.from(hex.toLowerCase(), \"hex\").toString(\"utf8\");\n        let obj = JSON.parse(json);\n        return obj;\n    }\n}\n\n\ninterface Header\n{\n    iss: string;\n    alg: AlgType;\n    exp: number;\n}"]}