{"version":3,"file":"symmetric-encryption.js","sourceRoot":"","sources":["../../src/crypto/symmetric-encryption.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AACjC,yDAAqD;AACrD,0DAAiD;AACjD,8BAA4B;AAI5B,MAAa,mBAAmB;IAE5B,gBAAwB,CAAC;IAGlB,MAAM,CAAC,WAAW;QAErB,OAAO,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAE3C,MAAM,CAAC,WAAW,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;gBAEhC,IAAI,GAAG,EACP;oBACI,MAAM,CAAC,GAAG,CAAC,CAAC;oBACZ,OAAO;iBACV;gBAED,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,MAAM,CAAC,OAAO,CAAC,GAAW,EAAE,KAAa;QAE5C,mBAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAC1F,mBAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAE9F,GAAG,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACjB,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;QAErB,OAAO,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAE3C,MAAM,CAAC,WAAW,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;gBAEhC,IAAI,GAAG,EACP;oBACI,MAAM,CAAC,GAAG,CAAC,CAAC;oBACZ,OAAO;iBACV;gBAED,IACA;oBACI,MAAM,EAAE,GAAG,GAAG,CAAC;oBACf,MAAM,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC,aAAa,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;oBACjF,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;oBACpD,SAAS,IAAI,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBACjC,MAAM,UAAU,GAAG,GAAG,SAAS,IAAI,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;oBACxD,OAAO,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,CAAC;iBACrC;gBACD,OAAO,KAAK,EACZ;oBACI,MAAM,CAAC,KAAK,CAAC,CAAC;iBACjB;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IAGP,CAAC;IAEM,MAAM,CAAC,OAAO,CAAC,GAAW,EAAE,KAAa;QAE5C,mBAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAC1F,mBAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAE9F,GAAG,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACjB,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;QAErB,IACA;YACI,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAClC,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC;gBACrB,MAAM,IAAI,kCAAe,CAAC,gBAAgB,CAAC,CAAC;YAEhD,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAC3C,MAAM,QAAQ,GAAG,MAAM,CAAC,gBAAgB,CAAC,aAAa,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;YACrF,IAAI,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;YAC5D,SAAS,IAAI,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACpC,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;SACrC;QACD,OAAO,KAAK,EACZ;YACI,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SAChC;IACL,CAAC;CACJ;AApFD,kDAoFC","sourcesContent":["import * as Crypto from \"crypto\";\nimport { CryptoException } from \"./crypto-exception\";\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport \"@nivinjoseph/n-ext\";\n\n\n// public\nexport class SymmetricEncryption\n{\n    private constructor() { }\n\n    \n    public static generateKey(): Promise<string>\n    {\n        return new Promise<string>((resolve, reject) =>\n        {\n            Crypto.randomBytes(32, (err, buf) =>\n            {\n                if (err)\n                {\n                    reject(err);\n                    return;\n                }\n\n                resolve(buf.toString(\"hex\").toUpperCase());\n            });\n        });\n    }\n    \n    public static encrypt(key: string, value: string): Promise<string>\n    {\n        given(key, \"key\").ensureHasValue().ensureIsString().ensure(t => !t.isEmptyOrWhiteSpace());\n        given(value, \"value\").ensureHasValue().ensureIsString().ensure(t => !t.isEmptyOrWhiteSpace());\n        \n        key = key.trim();\n        value = value.trim();\n        \n        return new Promise<string>((resolve, reject) =>\n        {\n            Crypto.randomBytes(16, (err, buf) =>\n            {\n                if (err)\n                {\n                    reject(err);\n                    return;\n                }\n\n                try \n                {\n                    const iv = buf;\n                    const cipher = Crypto.createCipheriv(\"AES-256-CBC\", Buffer.from(key, \"hex\"), iv);\n                    let encrypted = cipher.update(value, \"utf8\", \"hex\");\n                    encrypted += cipher.final(\"hex\");\n                    const cipherText = `${encrypted}.${iv.toString(\"hex\")}`;\n                    resolve(cipherText.toUpperCase());\n                }\n                catch (error)\n                {\n                    reject(error);\n                }\n            });\n        });\n        \n        \n    }\n    \n    public static decrypt(key: string, value: string): Promise<string>\n    {\n        given(key, \"key\").ensureHasValue().ensureIsString().ensure(t => !t.isEmptyOrWhiteSpace());\n        given(value, \"value\").ensureHasValue().ensureIsString().ensure(t => !t.isEmptyOrWhiteSpace());\n\n        key = key.trim();\n        value = value.trim();\n        \n        try \n        {\n            const splitted = value.split(\".\");\n            if (splitted.length !== 2)\n                throw new CryptoException(\"Invalid value.\");\n\n            const iv = Buffer.from(splitted[1], \"hex\");\n            const deCipher = Crypto.createDecipheriv(\"AES-256-CBC\", Buffer.from(key, \"hex\"), iv);\n            let decrypted = deCipher.update(splitted[0], \"hex\", \"utf8\");\n            decrypted += deCipher.final(\"utf8\");\n            return Promise.resolve(decrypted);\n        }\n        catch (error)\n        {\n            return Promise.reject(error);\n        }\n    }\n}"]}