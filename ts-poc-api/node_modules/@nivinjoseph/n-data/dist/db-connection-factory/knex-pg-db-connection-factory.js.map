{"version":3,"file":"knex-pg-db-connection-factory.js","sourceRoot":"","sources":["../../src/db-connection-factory/knex-pg-db-connection-factory.ts"],"names":[],"mappings":";;AACA,0DAAiD;AACjD,8BAA4B;AAC5B,6BAA6B;AAC7B,0DAAqE;AAIrE,MAAa,yBAAyB;IAelC,YAAmB,IAAY,EAAE,IAAY,EAAE,QAAgB,EAAE,QAAgB,EAAE,QAAgB;QAblF,YAAO,GAAQ;YAC5B,MAAM,EAAE,IAAI;YACZ,IAAI,EAAE;gBACF,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,EAAE;aACV;SAEJ,CAAC;QAGM,iBAAY,GAAG,KAAK,CAAC;QAKzB,mBAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAC3E,mBAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAC3E,mBAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QACnF,mBAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QACnF,mBAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAEnF,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG;YACtB,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;YACjB,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;YACjB,QAAQ,EAAE,QAAQ,CAAC,IAAI,EAAE;YACzB,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAE;YACrB,QAAQ,EAAE,QAAQ,CAAC,IAAI,EAAE;SAC5B,CAAC;QAEF,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAGM,MAAM;QAET,IAAI,IAAI,CAAC,YAAY;YACjB,MAAM,IAAI,uCAAyB,CAAC,0BAA0B,CAAC,CAAC;QAEpE,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC;IAEM,OAAO;QAEV,IAAI,IAAI,CAAC,YAAY;YACjB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;QAE7B,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;QACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAEzC,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAvDD,8DAuDC","sourcesContent":["import { DbConnectionFactory } from \"./db-connection-factory\";\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport \"@nivinjoseph/n-ext\";\nimport * as Knex from \"knex\";\nimport { InvalidOperationException } from \"@nivinjoseph/n-exception\";\n\n\n// public\nexport class KnexPgDbConnectionFactory implements DbConnectionFactory\n{\n    private readonly _config: any = {\n        client: \"pg\",\n        pool: {\n            min: 2,\n            max: 10\n        }\n        // debug: true\n    };\n\n    private _knex: Knex;\n    private _isDestroyed = false;\n    \n    \n    public constructor(host: string, port: string, database: string, username: string, password: string)\n    {\n        given(host, \"host\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        given(port, \"port\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        given(database, \"database\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        given(username, \"username\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        given(password, \"password\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n\n        this._config.connection = {\n            host: host.trim(),\n            port: port.trim(),\n            database: database.trim(),\n            user: username.trim(),\n            password: password.trim()\n        };\n\n        this._knex = Knex(this._config);\n    }\n    \n    \n    public create(): Promise<object>\n    {\n        if (this._isDestroyed)\n            throw new InvalidOperationException(\"using destroyed instance\");    \n        \n        return Promise.resolve(this._knex);\n    }\n    \n    public dispose(): Promise<void>\n    {\n        if (this._isDestroyed)\n            return Promise.resolve();    \n        \n        let knex = this._knex;\n        this._knex = null;\n        return new Promise<void>((resolve, reject) =>\n        {\n            knex.destroy().then(() => resolve()).catch((err) => reject(err));\n        });\n    }\n}"]}