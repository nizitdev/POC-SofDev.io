{"version":3,"file":"knex-pg-unit-of-work.js","sourceRoot":"","sources":["../../src/unit-of-work/knex-pg-unit-of-work.ts"],"names":[],"mappings":"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","sourcesContent":["import { UnitOfWork } from \"./unit-of-work\";\nimport { DbConnectionFactory } from \"../db-connection-factory/db-connection-factory\";\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport * as Knex from \"knex\";\nimport { InvalidOperationException } from \"@nivinjoseph/n-exception\";\nimport { inject } from \"@nivinjoseph/n-ject\";\n\n\n// public\n@inject(\"DbConnectionFactory\")\nexport class KnexPgUnitOfWork implements UnitOfWork\n{\n    private readonly _dbConnectionFactory: DbConnectionFactory;\n    private _transactionScope: TransactionScope;\n    \n    \n    public constructor(dbConnectionFactory: DbConnectionFactory)\n    {\n        given(dbConnectionFactory, \"dbConnectionFactory\").ensureHasValue();\n        \n        this._dbConnectionFactory = dbConnectionFactory;\n    }\n    \n    public getTransactionScope(): Promise<object>\n    {\n        if (this._transactionScope)\n        {\n            if (this._transactionScope.isCommitted || this._transactionScope.isRolledBack)\n                return Promise.reject(new InvalidOperationException(\"using completed UnitOfWork\"));    \n            return Promise.resolve(this._transactionScope.trx);\n        }\n        \n        let promise = new Promise<object>((resolve, reject) =>\n        {\n            this._dbConnectionFactory.create()\n                .then((knex: Knex) =>\n                {\n                    knex.transaction((trx: Knex.Transaction) =>\n                    {\n                        if (this._transactionScope)\n                        {\n                            trx.rollback();\n                            if (this._transactionScope.isCommitted || this._transactionScope.isRolledBack)\n                                reject(new InvalidOperationException(\"using completed UnitOfWork\")); \n                            else\n                                resolve(this._transactionScope.trx);\n                        }\n                        else\n                        {\n                            this._transactionScope = {\n                                trx: trx,\n                                isCommitted: false,\n                                isRolledBack: false\n                            };\n                            \n                            resolve(this._transactionScope.trx);\n                        }\n                    });\n                })\n                .catch(err => reject(err));\n        });\n        \n        return promise;\n    }\n    \n    public commit(): Promise<void>\n    {\n        if (!this._transactionScope)\n            return Promise.resolve();\n        \n        if (this._transactionScope.isCommitted || this._transactionScope.isRolledBack)\n            return Promise.reject(new InvalidOperationException(\"committing completed UnitOfWork\"));    \n        \n        this._transactionScope.isCommitted = true;\n        let promise = new Promise<void>((resolve, reject) =>\n        {\n            this._transactionScope.trx.commit()\n                .then(() => resolve())\n                .catch((err) => reject(err));\n        });\n        \n        return promise;\n    }\n    \n    public rollback(): Promise<void>\n    {\n        if (!this._transactionScope)\n            return Promise.resolve();\n\n        if (this._transactionScope.isCommitted || this._transactionScope.isRolledBack)\n            return Promise.reject(new InvalidOperationException(\"rolling back completed UnitOfWork\"));\n\n        this._transactionScope.isRolledBack = true;\n        let promise = new Promise<void>((resolve, reject) =>\n        {\n            this._transactionScope.trx.rollback(\"[DELIBERATE]\")\n                .then(() => resolve())\n                .catch((err) => reject(err));\n        });\n\n        return promise;\n    }\n}\n\ninterface TransactionScope\n{\n    trx: Knex.Transaction;\n    isCommitted: boolean;\n    isRolledBack: boolean;\n}"]}