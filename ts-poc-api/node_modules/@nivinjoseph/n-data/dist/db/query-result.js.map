{"version":3,"file":"query-result.js","sourceRoot":"","sources":["../../src/db/query-result.ts"],"names":[],"mappings":";;AAAA,0DAAiD;AACjD,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAInC,MAAa,WAAW;IAQpB,YAAmB,IAAc;QAE7B,mBAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,cAAc,EAAE,CAAC;QACrC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IAPD,IAAW,IAAI,KAAuB,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAUnD,YAAY;QAEf,IAAI,IAAI,GAAG,IAAI,OAAO,EAAE,CAAC;QACzB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACtB,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;CACJ;AArBD,kCAqBC","sourcesContent":["import { given } from \"@nivinjoseph/n-defensive\";\nconst Treeize = require(\"treeize\");\n\n\n// public\nexport class QueryResult<T>\n{\n    private readonly _rows: Array<T>;\n    \n    \n    public get rows(): ReadonlyArray<T> { return this._rows; }\n    \n    \n    public constructor(rows: Array<T>)\n    {\n        given(rows, \"rows\").ensureHasValue();\n        this._rows = rows;\n    }\n    \n    \n    public toObjectTree<U>(): Array<U>\n    {\n        let tree = new Treeize();\n        tree.grow(this._rows);\n        return tree.getData();\n    }\n}"]}