{"version":3,"file":"delay.js","sourceRoot":"","sources":["../src/delay.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,0DAAiD;AAGjD,MAAsB,KAAK;IAEhB,MAAM,CAAO,KAAK,CAAC,KAAa;;YAEnC,mBAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,8BAA8B,CAAC,CAAC;YAC5G,MAAM,KAAK,CAAC,OAAO,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC;QACpC,CAAC;KAAA;IAEM,MAAM,CAAO,OAAO,CAAC,KAAa;;YAErC,mBAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,8BAA8B,CAAC,CAAC;YAC5G,MAAM,KAAK,CAAC,OAAO,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC;QACpC,CAAC;KAAA;IAEM,MAAM,CAAO,OAAO,CAAC,KAAa;;YAErC,mBAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,8BAA8B,CAAC,CAAC;YAC5G,MAAM,KAAK,CAAC,YAAY,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC;QAC3C,CAAC;KAAA;IAEM,MAAM,CAAC,YAAY,CAAC,KAAa;QAEpC,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAEzC,IACA;gBACI,mBAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,8BAA8B,CAAC,CAAC;gBAC5G,UAAU,CAAC,GAAG,EAAE,CAAC,OAAO,EAAE,EAAE,KAAK,CAAC,CAAC;aACtC;YACD,OAAO,KAAK,EACZ;gBACI,MAAM,CAAC,KAAK,CAAC,CAAC;aACjB;QACL,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAnCD,sBAmCC","sourcesContent":["import { given } from \"@nivinjoseph/n-defensive\";\n\n// public\nexport abstract class Delay // static class\n{\n    public static async hours(value: number): Promise<void>\n    {\n        given(value, \"value\").ensureHasValue().ensureIsNumber().ensure(t => t >= 0, \"value has to be 0 or greater\");\n        await Delay.minutes(value * 60);\n    }\n    \n    public static async minutes(value: number): Promise<void>\n    {\n        given(value, \"value\").ensureHasValue().ensureIsNumber().ensure(t => t >= 0, \"value has to be 0 or greater\");\n        await Delay.seconds(value * 60);\n    }\n    \n    public static async seconds(value: number): Promise<void>\n    {\n        given(value, \"value\").ensureHasValue().ensureIsNumber().ensure(t => t >= 0, \"value has to be 0 or greater\");\n        await Delay.milliseconds(value * 1000);\n    }\n    \n    public static milliseconds(value: number): Promise<void>\n    {\n        return new Promise<void>((resolve, reject) =>\n        {\n            try \n            {\n                given(value, \"value\").ensureHasValue().ensureIsNumber().ensure(t => t >= 0, \"value has to be 0 or greater\");\n                setTimeout(() => resolve(), value);\n            }\n            catch (error)\n            {\n                reject(error);\n            }\n        });\n    }\n}"]}