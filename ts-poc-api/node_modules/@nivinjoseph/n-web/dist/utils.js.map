{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":";;AAAA,6CAAyC;AACzC,0DAAiD;AAIjD,MAAsB,KAAK;IAEhB,MAAM,CAAC,WAAW,CAAC,KAAa,EAAE,MAAe,EAAE,OAAgB;QAEtE,mBAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAE7E,IAAI,MAAM;YACN,mBAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,cAAc,EAAE,CAAC;QAE7C,IAAI,OAAO;YACP,mBAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,cAAc,EAAE,CAAC;QAE/C,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAEzC,IAAI,OAAO,KAAK,SAAS,IAAI,OAAO,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,EAC9E;YACI,OAAO,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YAC7C,IAAI,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC;gBACrB,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAEpD,IAAI,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC;gBACrB,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAG9C,IAAI,eAAe,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACzC,IAAI,KAAK,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,WAAW,EAAE,CAAC;gBACnE,OAAO,GAAG,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAExC,KAAK,GAAG,OAAO,GAAG,GAAG,GAAG,KAAK,CAAC;SACjC;QAED,OAAO,MAAM,CAAC,CAAC,CAAC,IAAI,sBAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IAC3E,CAAC;CACJ;AAjCD,sBAiCC","sourcesContent":["import { RouteInfo } from \"./route-info\";\nimport { given } from \"@nivinjoseph/n-defensive\";\n\n\n// public\nexport abstract class Utils // static class\n{\n    public static generateUrl(route: string, params?: object, baseUrl?: string): string\n    {\n        given(route, \"route\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        \n        if (params)\n            given(params, \"params\").ensureIsObject();\n        \n        if (baseUrl)\n            given(baseUrl, \"baseUrl\").ensureIsString();    \n\n        route = route.trim().replaceAll(\" \", \"\");\n\n        if (baseUrl !== undefined && baseUrl != null && !baseUrl.isEmptyOrWhiteSpace())\n        {\n            baseUrl = baseUrl.trim().replaceAll(\" \", \"\");\n            if (baseUrl.endsWith(\"/\"))\n                baseUrl = baseUrl.substr(0, baseUrl.length - 1);\n\n            if (route.startsWith(\"/\"))\n                route = route.substr(1, route.length - 1);\n\n            // special treatment for the sake of docker routing on ECS\n            let splittedBaseUrl = baseUrl.split(\"/\");\n            if (route.toLowerCase().startsWith(splittedBaseUrl.pop().toLowerCase()))\n                baseUrl = splittedBaseUrl.join(\"/\");\n\n            route = baseUrl + \"/\" + route;\n        }\n\n        return params ? new RouteInfo(route, true).generateUrl(params) : route;\n    }\n}"]}