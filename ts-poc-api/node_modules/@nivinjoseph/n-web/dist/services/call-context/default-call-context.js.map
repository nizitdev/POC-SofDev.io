{"version":3,"file":"default-call-context.js","sourceRoot":"","sources":["../../../src/services/call-context/default-call-context.ts"],"names":[],"mappings":"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","sourcesContent":["import { CallContext } from \"./call-context\";\nimport { Scope } from \"@nivinjoseph/n-ject\";\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport * as Koa from \"koa\";\nimport { ClaimsIdentity } from \"@nivinjoseph/n-sec\";\nimport \"@nivinjoseph/n-ext\";\n\n\nexport class DefaultCallContext implements CallContext\n{\n    private _ctx: Koa.Context;\n    private _authHeader: string;\n    private _hasAuth: boolean = false;\n    private _authScheme: string;\n    private _authToken: string;\n    \n    \n    public get dependencyScope(): Scope { return this._ctx.state.scope; }\n    public get pathParams(): Object { return JSON.parse(JSON.stringify(this._ctx.params)); }\n    public get queryParams(): Object { return JSON.parse(JSON.stringify(this._ctx.query)); }\n    public get hasAuth(): boolean { return this._hasAuth; }\n    public get authScheme(): string { return this._authScheme; }\n    public get authToken(): string { return this._authToken; }\n    public get isAuthenticated(): boolean { return this.identity !== undefined && this.identity !== null; }\n    public get identity(): ClaimsIdentity { return this._ctx.state.identity; }\n    \n    \n    public configure(ctx: Koa.Context, authHeader: string): void\n    {\n        given(ctx, \"ctx\").ensureHasValue().ensureIsObject();\n        given(authHeader, \"authHeader\").ensureHasValue().ensureIsString().ensure(t => !t.isEmptyOrWhiteSpace());\n        \n        this._ctx = ctx;\n        this._authHeader = authHeader;\n        this.populateSchemeAndToken();\n    }\n    \n    \n    public getRequestHeader(header: string): string\n    {\n        given(header, \"header\").ensureHasValue().ensureIsString().ensure(t => !t.isEmptyOrWhiteSpace());\n        \n        return this._ctx.get(header);\n    }\n    \n    public setResponseType(responseType: string): void\n    {\n        given(responseType, \"responseType\")\n            .ensureHasValue()\n            .ensureIsString()\n            .ensure(t => !t.isEmptyOrWhiteSpace());\n        \n        this._ctx.response.type = responseType.trim();\n    }\n    \n    public setResponseContentDisposition(contentDisposition: string): void\n    {\n        given(contentDisposition, \"contentDisposition\")\n            .ensureHasValue()\n            .ensureIsString()\n            .ensure(t => !t.isEmptyOrWhiteSpace());\n        \n        this._ctx.response.set({\n            \"Content-Disposition\": contentDisposition.trim()\n        });\n    }\n    \n    public setResponseHeader(header: string, value: string): void\n    {\n        given(header, \"header\").ensureHasValue().ensureIsString().ensure(t => !t.isEmptyOrWhiteSpace());\n        given(value, \"value\").ensureHasValue().ensureIsString();\n        \n        this._ctx.set(header, value);\n    }\n    \n    \n    private populateSchemeAndToken(): void\n    {\n        if (this._ctx.header && this._ctx.header[this._authHeader])\n        {\n            let authorization: string = this._ctx.header[this._authHeader];\n            if (!authorization.isEmptyOrWhiteSpace())\n            {\n                authorization = authorization.trim();\n                while (authorization.contains(\"  \")) // double space\n                    authorization = authorization.replaceAll(\"  \", \" \");    \n                \n                let splitted = authorization.split(\" \");\n                if (splitted.length === 2)\n                {\n                    let scheme = splitted[0].trim().toLowerCase();\n                    let token = splitted[1].trim();\n                    if (!scheme.isEmptyOrWhiteSpace() && !token.isEmptyOrWhiteSpace())\n                    {\n                        this._hasAuth = true;\n                        this._authScheme = scheme;\n                        this._authToken = token;\n                    }\n                }\n            }\n        } \n    }\n}"]}