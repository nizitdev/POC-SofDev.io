{"version":3,"file":"default-event-aggregator.js","sourceRoot":"","sources":["../../../src/services/event-aggregator/default-event-aggregator.ts"],"names":[],"mappings":";;;;;;;;;;AAEA,0DAAiD;AACjD,gDAA0D;AAG1D,MAAa,sBAAsB;IAAnC;QAEqB,mBAAc,GAAkD,EAAE,CAAC;IAoCxF,CAAC;IAhCU,YAAY,CAAC,SAA8B;QAE9C,mBAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,cAAc,EAAE,CAAC,YAAY,CAAC,4BAAmB,CAAC,CAAC;QACjF,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAChC,CAAC;IAEM,SAAS,CAAC,KAAa,EAAE,OAA0B;QAEtD,mBAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,cAAc,EAAE,CAAC;QACvC,mBAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;QAE5D,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;QAErB,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;YAC3B,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,IAAI,KAAK,EAAqB,CAAC;QAEhE,MAAM,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QACjD,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAChC,CAAC;IAEY,OAAO,CAAC,KAAa;;YAE9B,mBAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;YAExD,MAAM,SAAS,GAAY,KAAM,CAAC,WAAW,EAAE,CAAC;YAEhD,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC;gBAC/B,OAAO;YAEX,MAAM,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;YACrD,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACrF,CAAC;KAAA;CACJ;AAtCD,wDAsCC","sourcesContent":["import { EventAggregator } from \"./event-aggregator\";\nimport { EventHandler } from \"./event-handler\";\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport { BackgroundProcessor } from \"@nivinjoseph/n-util\";\n\n\nexport class DefaultEventAggregator implements EventAggregator\n{\n    private readonly _subscriptions: { [index: string]: Array<EventHandler<any>> } = {};\n    private _processor: BackgroundProcessor;\n    \n    \n    public useProcessor(processor: BackgroundProcessor): void\n    {\n        given(processor, \"processor\").ensureHasValue().ensureIsType(BackgroundProcessor);\n        this._processor = processor;\n    }\n    \n    public subscribe(event: string, handler: EventHandler<any>): void\n    {\n        given(event, \"event\").ensureHasValue();\n        given(handler, \"handler\").ensureHasValue().ensureIsObject();\n\n        event = event.trim();\n\n        if (!this._subscriptions[event])\n            this._subscriptions[event] = new Array<EventHandler<any>>();\n\n        const eventHandlers = this._subscriptions[event];\n        eventHandlers.push(handler);\n    }\n    \n    public async publish(event: object): Promise<void>\n    {\n        given(event, \"event\").ensureHasValue().ensureIsObject();\n\n        const eventName = (<Object>event).getTypeName();\n\n        if (!this._subscriptions[eventName])\n            return;\n        \n        const eventHandlers = this._subscriptions[eventName];\n        eventHandlers.forEach(t => this._processor.processAction(() => t.handle(event)));\n    }\n}"]}