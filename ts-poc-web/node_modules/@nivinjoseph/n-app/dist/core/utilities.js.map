{"version":3,"file":"utilities.js","sourceRoot":"","sources":["../../src/core/utilities.ts"],"names":[],"mappings":";;AAAA,0DAAgE;AAChE,8BAA4B;AAC5B,mDAA+C;AAG/C,MAAa,SAAS;IAWX,MAAM,CAAC,gBAAgB,CAAC,GAAQ;QAEnC,IAAI,aAAa,GAAG,IAAI,KAAK,EAAgB,CAAC;QAC9C,IAAI,SAAS,GAAG,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC3C,IAAI,SAAS,KAAK,SAAS,IAAI,SAAS,KAAK,IAAI;YAC7C,OAAO,aAAa,CAAC;QAEzB,aAAa,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;QAE7D,IAAI,aAAa,GAAG,MAAM,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;QACpD,KAAK,IAAI,IAAI,IAAI,aAAa,EAC9B;YACI,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;YACnB,IAAI,IAAI,KAAK,aAAa,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC;gBAClH,SAAS;YAEb,IAAI,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC;gBACzC,MAAM,IAAI,kCAAoB,CAAC,SAAkB,GAAI,CAAC,WAAW,EAAE,0CAA0C,IAAI,yCAAyC,SAAS,CAAC,SAAS,GAAG,CAAC,CAAC;YAEtL,IAAI,UAAU,GAAG,MAAM,CAAC,wBAAwB,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YAC5D,aAAa,CAAC,IAAI,CAAC,IAAI,4BAAY,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;SAC1D;QAED,OAAO,aAAa,CAAC;IACzB,CAAC;;AAjCc,kBAAQ,GAAG,CAAC,KAAK,EAAE,UAAU,EAAE,SAAS,EAAE,WAAW,EAAE,iBAAiB,EAAE,kBAAkB;IACvG,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,eAAe,EAAE,eAAe,EAAE,UAAU,EAAE,WAAW,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;AAElH,mBAAS,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO;IAC/G,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ;IACrG,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;AAPtH,8BAuHC","sourcesContent":["import { ApplicationException } from \"@nivinjoseph/n-exception\";\nimport \"@nivinjoseph/n-ext\";\nimport { PropertyInfo } from \"./property-info\";\n\n\nexport class Utilities\n{\n    private static internal = [\"ctx\", \"onCreate\", \"onMount\", \"onDestroy\", \"executeOnCreate\", \"executeOnDestroy\",\n        \"watch\", \"unWatch\", \"bindings\", \"getBound\", \"getBoundModel\", \"setBoundModel\", \"pathArgs\", \"queryArgs\", \"onEnter\", \"onLeave\"];\n    \n    private static forbidden = [\"do\", \"if\", \"for\", \"let\", \"new\", \"try\", \"var\", \"case\", \"else\", \"with\", \"await\", \"break\",\n        \"catch\", \"class\", \"const\", \"super\", \"throw\", \"while\", \"yield\", \"delete\", \"export\", \"import\", \"return\",\n        \"switch\", \"default\", \"extends\", \"finally\", \"continue\", \"debugger\", \"function\", \"arguments\", \"typeof\", \"void\"];\n    \n    \n    \n    public static getPropertyInfos(val: any): Array<PropertyInfo>\n    {\n        let propertyInfos = new Array<PropertyInfo>();\n        let prototype = Object.getPrototypeOf(val);\n        if (prototype === undefined || prototype === null)  // we are dealing with Object\n            return propertyInfos;\n        \n        propertyInfos.push(...Utilities.getPropertyInfos(prototype));\n        \n        let propertyNames = Object.getOwnPropertyNames(val);\n        for (let name of propertyNames)\n        {\n            name = name.trim();\n            if (name === \"constructor\" || name.startsWith(\"_\") || name.startsWith(\"$\") || Utilities.internal.some(t => t === name))\n                continue;\n\n            if (Utilities.forbidden.some(t => t === name))\n                throw new ApplicationException(`Class ${(<Object>val).getTypeName()} has a member with the forbidden name '${name}'. The following names are forbidden: ${Utilities.forbidden}.`);    \n            \n            let descriptor = Object.getOwnPropertyDescriptor(val, name);\n            propertyInfos.push(new PropertyInfo(name, descriptor));\n        }\n        \n        return propertyInfos;\n    }\n    \n    // public static createRouteArgs(route: RouteInfo, ctx: any): Array<any>\n    // {\n    //     let pathParams = ctx.params ? ctx.params : {};\n    //     let queryParams = ctx.query ? ctx.query : {};\n    //     let model: { [index: string]: any } = {};\n\n    //     for (let param of route.params)\n    //     {\n    //         let lookupKey = param.paramKey.trim().toLowerCase();\n    //         let value = null;\n    //         if (param.isQuery)\n    //         {\n    //             for (let key in queryParams)\n    //             {\n    //                 if (key.trim().toLowerCase() === lookupKey)\n    //                 {\n    //                     value = param.parseParam(queryParams[key]);\n    //                     break;\n    //                 }    \n    //             }\n                \n    //             if (value === undefined || value === null)\n    //             {\n    //                 if (!param.isOptional)\n    //                     throw new HttpException(404);\n                    \n    //                 value = null;\n    //             }    \n    //         }\n    //         else\n    //         {\n    //             for (let key in pathParams)\n    //             {\n    //                 if (key.trim().toLowerCase() === lookupKey)\n    //                 {\n    //                     value = param.parseParam(pathParams[key]);\n    //                     break;\n    //                 }\n    //             }\n\n    //             if (value === undefined || value === null)\n    //                 throw new HttpException(404);\n    //         }\n            \n    //         model[param.paramKey] = value;\n    //     }    \n\n        \n    //     // for (let key in queryParams)\n    //     // {\n    //     //     let routeParam = route.findRouteParam(key);\n    //     //     if (!routeParam)\n    //     //         continue;\n\n    //     //     model[routeParam.paramKey] = routeParam.parseParam(queryParams[key]);\n    //     // }\n\n    //     // for (let key in pathParams) // this wont work in multi level nesting\n    //     // {\n    //     //     let routeParam = route.findRouteParam(key);\n    //     //     if (!routeParam)\n    //     //         throw new HttpException(404);\n\n    //     //     model[routeParam.paramKey] = routeParam.parseParam(pathParams[key]);\n    //     // }\n\n    //     let result = [];\n    //     for (let param of route.params.orderBy(t => t.order))\n    //     {\n    //         let value = model[param.paramKey];\n    //         // if (value === undefined || value === null)\n    //         // {\n    //         //     if (!param.isOptional)\n    //         //         throw new HttpException(404);\n\n    //         //     value = null;\n    //         // }\n    //         result.push(value);\n    //     }\n\n    //     return result;\n    // }\n}\n\n\n\n\n\n\n"]}