{"version":3,"file":"page-tree-builder.js","sourceRoot":"","sources":["../../src/core/page-tree-builder.ts"],"names":[],"mappings":";;AAAA,0DAAiD;AACjD,iCAA8B;AAI9B,MAAa,eAAe;IAMxB,YAAmB,IAAU,EAAE,iBAAkD;QAE7E,mBAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,cAAc,EAAE,CAAC;QACrC,mBAAK,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,CAAC,cAAc,EAAE,CAAC;QAC/D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,cAAc,GAAG,iBAAiB,CAAC;IAC5C,CAAC;IAGM,KAAK;QAER,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC;IAC5B,CAAC;IAGO,SAAS;QAEb,KAAK,IAAI,YAAY,IAAI,IAAI,CAAC,cAAc,EAC5C;YACI,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC;YAE7B,KAAK,IAAI,OAAO,IAAI,YAAY,CAAC,KAAK,CAAC,YAAY,EACnD;gBACI,IAAI,OAAO,KAAK,WAAW,CAAC,OAAO;oBAC/B,SAAS;gBAEb,IAAI,IAAI,GAAG,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,OAAO,CAAC,CAAC;gBACjE,IAAI,CAAC,IAAI;oBACL,IAAI,GAAG,IAAI,WAAI,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;gBAE1C,WAAW,GAAG,IAAI,CAAC;aACtB;YAED,WAAW,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;SAChD;IACL,CAAC;IAEO,SAAS;QAEb,IAAI,cAAc,GAAG,IAAI,KAAK,EAAQ,CAAC;QAEvC,cAAc,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAE5C,OAAO,cAAc,CAAC,MAAM,GAAG,CAAC,EAChC;YACI,IAAI,WAAW,GAAG,cAAc,CAAC,KAAK,EAAE,CAAC;YACzC,IAAI,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC;YACpC,IAAI,CAAC,WAAW,CAAC,YAAY,EAC7B;gBACI,KAAK,IAAI,KAAK,IAAI,QAAQ;oBACtB,KAAK,CAAC,YAAY,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;aAC9C;YAED,cAAc,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAC;SACpC;QAED,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY;YACvB,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAExB,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;QACnC,KAAK,IAAI,KAAK,IAAI,QAAQ;YACtB,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAE7B,OAAO,QAAQ,CAAC;IACpB,CAAC;CACJ;AAxED,0CAwEC","sourcesContent":["import { given } from \"@nivinjoseph/n-defensive\";\nimport { Page } from \"./page\";\nimport { PageRegistration } from \"./page-registration\";\n\n\nexport class PageTreeBuilder\n{\n    private readonly _root: Page;\n    private readonly _registrations: ReadonlyArray<PageRegistration>;\n\n\n    public constructor(root: Page, pageRegistrations: ReadonlyArray<PageRegistration>)\n    {\n        given(root, \"root\").ensureHasValue();\n        given(pageRegistrations, \"pageRegistrations\").ensureHasValue();\n        this._root = root;\n        this._registrations = pageRegistrations;\n    }\n\n\n    public build(): ReadonlyArray<Page>\n    {\n        this.buildTree();\n        return this.shakeTree();\n    }\n\n    \n    private buildTree(): void\n    {\n        for (let registration of this._registrations)\n        {\n            let currentNode = this._root;\n\n            for (let segment of registration.route.pathSegments)\n            {\n                if (segment === currentNode.segment)\n                    continue;\n\n                let node = currentNode.children.find(t => t.segment === segment);\n                if (!node)\n                    node = new Page(segment, currentNode);\n\n                currentNode = node;\n            }\n\n            currentNode.attachRegistration(registration);\n        }\n    }\n\n    private shakeTree(): ReadonlyArray<Page>\n    {\n        let nodesToProcess = new Array<Page>();\n        // skip root\n        nodesToProcess.push(...this._root.children);\n\n        while (nodesToProcess.length > 0)\n        {\n            let currentNode = nodesToProcess.shift();\n            let children = currentNode.children;\n            if (!currentNode.registration)\n            {\n                for (let child of children)\n                    child.changeParent(currentNode.parent);\n            }\n\n            nodesToProcess.push(...children);\n        }\n        \n        if (this._root.registration)\n            return [this._root];\n        \n        let children = this._root.children;\n        for (let child of children)\n            child.changeParent(null);\n\n        return children;        \n    }\n}"]}