{"version":3,"file":"base-view-model.js","sourceRoot":"","sources":["../../src/core/base-view-model.ts"],"names":[],"mappings":";;AAAA,0DAAiD;AACjD,0DAA2F;AAG3F,MAAa,aAAa;IAA1B;QAEqB,aAAQ,GAAkC,EAAE,CAAC;IA+ElE,CAAC;IA1EG,IAAc,GAAG,KAAU,OAAa,IAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAI9C,QAAQ;QAEd,IAAI,IAAI,CAAC,gBAAgB;YACrB,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAChC,CAAC;IAIS,OAAO,CAAC,OAAoB,IACpC,CAAC;IAGO,SAAS;QAEf,KAAK,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAC7B;YACI,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EACtB;gBACI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;gBACrB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC;aAClC;SACJ;QAED,IAAI,IAAI,CAAC,iBAAiB;YACtB,IAAI,CAAC,iBAAiB,EAAE,CAAC;IACjC,CAAC;IAES,eAAe,CAAC,aAAyB;QAE/C,mBAAK,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC,cAAc,EAAE,CAAC;QACvD,IAAI,CAAC,gBAAgB,GAAG,aAAa,CAAC;IAC1C,CAAC;IAES,gBAAgB,CAAC,aAAyB;QAEhD,mBAAK,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC,cAAc,EAAE,CAAC;QACvD,IAAI,CAAC,iBAAiB,GAAG,aAAa,CAAC;IAC3C,CAAC;IAES,KAAK,CAAI,YAAoB,EAAE,QAAyC;QAE9E,IAAI,CAAC,IAAI,CAAC,GAAG;YACT,MAAM,IAAI,uCAAyB,CAAC,oCAAoC,CAAC,CAAC;QAE9E,mBAAK,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAE3F,YAAY,GAAG,YAAY,CAAC,IAAI,EAAE,CAAC;QAEnC,IAAI,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC;YAC3B,MAAM,IAAI,kCAAoB,CAAC,uCAAuC,YAAY,IAAI,CAAC,CAAC;QAE5F,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,EACtD,UAAU,MAAW,EAAE,MAAW;YAE9B,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC7B,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IAC3B,CAAC;IAES,OAAO,CAAC,YAAoB;QAElC,mBAAK,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAE3F,YAAY,GAAG,YAAY,CAAC,IAAI,EAAE,CAAC;QAEnC,IAAI,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,EAC/B;YACI,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC;YAC9B,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,SAAS,CAAC;SAC3C;IACL,CAAC;CACJ;AAjFD,sCAiFC","sourcesContent":["import { given } from \"@nivinjoseph/n-defensive\";\nimport { ApplicationException, InvalidOperationException } from \"@nivinjoseph/n-exception\";\n\n\nexport class BaseViewModel\n{\n    private readonly _watches: { [index: string]: Function } = {};\n    private _executeOnCreate: () => void;\n    private _executeOnDestroy: () => void;\n\n\n    protected get ctx(): any { return (<any>this)[\"_ctx\"]; }\n\n\n    /** Override */\n    protected onCreate(): void\n    {\n        if (this._executeOnCreate)\n            this._executeOnCreate();\n    }\n\n    /** Override */\n    // @ts-ignore\n    protected onMount(element: HTMLElement): void\n    { }\n\n    /** Override */\n    protected onDestroy(): void\n    {\n        for (let key in this._watches)\n        {\n            if (this._watches[key])\n            {\n                this._watches[key]();\n                this._watches[key] = undefined;\n            }\n        }\n\n        if (this._executeOnDestroy)\n            this._executeOnDestroy();\n    }\n\n    protected executeOnCreate(funcToExecute: () => void): void\n    {\n        given(funcToExecute, \"funcToExecute\").ensureHasValue();\n        this._executeOnCreate = funcToExecute;\n    }\n\n    protected executeOnDestroy(funcToExecute: () => void): void\n    {\n        given(funcToExecute, \"funcToExecute\").ensureHasValue();\n        this._executeOnDestroy = funcToExecute;\n    }\n\n    protected watch<T>(propertyName: string, callback: (value: T, oldValue: T) => void): void\n    {\n        if (!this.ctx)\n            throw new InvalidOperationException(\"calling watch() in the constructor\");\n\n        given(propertyName, \"propertyName\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n\n        propertyName = propertyName.trim();\n\n        if (this._watches[propertyName])\n            throw new ApplicationException(`Watch already defined for property '${propertyName}'.`);\n\n        this._watches[propertyName] = this.ctx.$watch(propertyName,\n            function (newVal: any, oldVal: any)\n            {\n                callback(newVal, oldVal);\n            }, { deep: true });\n    }\n\n    protected unWatch(propertyName: string): void\n    {\n        given(propertyName, \"propertyName\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n\n        propertyName = propertyName.trim();\n\n        if (this._watches[propertyName])\n        {\n            this._watches[propertyName]();\n            this._watches[propertyName] = undefined;\n        }\n    }\n}"]}