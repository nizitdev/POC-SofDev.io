{"version":3,"file":"default-event-aggregator.js","sourceRoot":"","sources":["../../../src/services/event-aggregator/default-event-aggregator.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventAggregator, EventSubscription } from \"./event-aggregator\";\nimport { given } from \"@nivinjoseph/n-defensive\";\n\n\nexport class DefaultEventAggregator implements EventAggregator\n{\n    private _subscriptions: { [index: string]: Array<DefaultEventSubscriptionInternal> } = {};\n\n\n    public subscribe(event: string, handler: (...eventArgs: any[]) => void): EventSubscription\n    {\n        given(event, \"event\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        given(handler, \"handler\").ensureHasValue();\n        \n        event = event.trim();\n        \n        if (!this._subscriptions[event])\n            this._subscriptions[event] = new Array<DefaultEventSubscriptionInternal>();\n\n        let eventSubscriptions = this._subscriptions[event];\n\n        let existingRegistration = eventSubscriptions.find(t => t.handler === handler);\n        if (existingRegistration)\n            return existingRegistration.subscription;\n\n        let eventSubscriptionInternal = new DefaultEventSubscriptionInternal();\n        eventSubscriptionInternal.handler = handler;\n        eventSubscriptionInternal.subscription = new DefaultEventSubscription(event, this, eventSubscriptionInternal);\n        eventSubscriptions.push(eventSubscriptionInternal);\n\n        return eventSubscriptionInternal.subscription;\n    }\n\n    public publish(event: string, ...eventArgs: any[]): void\n    {\n        given(event, \"event\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        \n        event = event.trim();\n        \n        if (!this._subscriptions[event])\n            return;\n\n        this._subscriptions[event].forEach(t => t.handler(...eventArgs));\n    }\n\n    \n    // Called dynamically by EventSubscription class (internal)\n    // @ts-ignore\n    private unsubscribe(event: string, subscription: any): void\n    {\n        given(event, \"event\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n\n        event = event.trim();\n        \n        if (!this._subscriptions[event])\n            return;\n\n        this._subscriptions[event].remove(subscription);\n    }\n}\n\nclass DefaultEventSubscription implements EventSubscription\n{\n    private _event: string;\n    private _eventManager: any;\n    private _subscription: Object;\n    private _isUnsubscribed = false;\n\n\n    public get event(): string { return this._event; }\n\n\n    constructor(event: string, eventManager: any, subscription: Object)\n    {\n        this._event = event;\n        this._eventManager = eventManager;\n        this._subscription = subscription;\n    }\n\n\n    public unsubscribe(): void\n    {\n        if (this._isUnsubscribed) return;\n\n        this._eventManager.unsubscribe(this._event, this._subscription);\n        this._isUnsubscribed = true;\n    }\n}\n\nclass DefaultEventSubscriptionInternal\n{\n    public handler: (...eventArgs: any[]) => void;\n    public subscription: EventSubscription;\n}"]}