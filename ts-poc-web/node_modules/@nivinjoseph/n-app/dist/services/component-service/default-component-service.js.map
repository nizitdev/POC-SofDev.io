{"version":3,"file":"default-component-service.js","sourceRoot":"","sources":["../../../src/services/component-service/default-component-service.ts"],"names":[],"mappings":"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","sourcesContent":["import { given } from \"@nivinjoseph/n-defensive\";\nimport { ComponentService } from \"./component-service\";\nimport { ViewModelRegistration } from \"../../core/view-model-registration\";\nimport { Scope } from \"@nivinjoseph/n-ject\";\nimport { ApplicationException } from \"@nivinjoseph/n-exception\";\nimport { Utilities } from \"../../core/utilities\";\nimport { ComponentOptions } from \"./component-options\";\n\n\nexport class DefaultComponentService implements ComponentService\n{\n    public compile(componentViewModelClass: Function): ComponentOptions\n    {\n        given(componentViewModelClass, \"componentViewModelClass\").ensureHasValue().ensureIsFunction();\n\n        const registration = new ViewModelRegistration(componentViewModelClass);\n\n        return this.create(registration);\n    }\n\n\n    public create(registration: ViewModelRegistration): ComponentOptions\n    {\n        given(registration, \"registration\").ensureHasValue();\n\n        const component: any = {};\n\n        component.template = registration.template;\n\n        component.inject = [\"pageScopeContainer\", \"rootScopeContainer\"];\n\n        component.data = function ()\n        {\n            let vueVm = this;\n\n            const container: Scope = vueVm.pageScopeContainer || vueVm.rootScopeContainer;\n            if (!container)\n                throw new ApplicationException(\"Could not get pageScopeContainer or rootScopeContainer.\");\n            let vm = container.resolve<any>(registration.name);\n\n            let data = { vm: vm };\n            let methods: { [index: string]: any } = {};\n            let computed: { [index: string]: any } = {};\n\n            let propertyInfos = Utilities.getPropertyInfos(vm);\n            for (let info of propertyInfos)\n            {Â \n                if (typeof (info.descriptor.value) === \"function\")\n                    methods[info.name] = info.descriptor.value.bind(vm);\n                else if (info.descriptor.get || info.descriptor.set)\n                {\n                    computed[info.name] = {\n                        get: info.descriptor.get ? info.descriptor.get.bind(vm) : undefined,\n                        set: info.descriptor.set ? info.descriptor.set.bind(vm) : undefined\n                    };\n                }\n            }\n\n            vueVm.$options.methods = methods;\n            vueVm.$options.computed = computed;\n            vm._ctx = vueVm;\n            vm._bindings = [];\n\n            return data;\n        };\n\n\n        component.beforeCreate = function ()\n        {\n            // console.log(\"executing beforeCreate\");\n            // console.log(this.vm);\n        };\n\n        component.created = function ()\n        {\n            // console.log(\"executing created\");\n            // console.log(this.vm);\n\n            if (this.vm.onCreate)\n                this.vm.onCreate();\n        };\n\n        component.beforeMount = function ()\n        {\n            // console.log(\"executing beforeMount\");\n            // console.log(this.vm);\n        };\n\n        component.mounted = function ()\n        {\n            // console.log(\"executing mounted\");\n            // console.log(this.vm);\n\n            if (this.vm.onMount)\n                this.vm.onMount(this.$el);\n        };\n\n        component.beforeUpdate = function ()\n        {\n            // console.log(\"executing beforeUpdate\");\n            // console.log(this.vm);\n        };\n\n        component.updated = function ()\n        {\n            // console.log(\"executing updated\");\n            // console.log(this.vm);\n        };\n\n        component.beforeDestroy = function ()\n        {\n            // console.log(\"executing beforeDestroy\");\n            // console.log(this.vm);\n        };\n\n        component.destroyed = function ()\n        {\n            // console.log(\"executing destroyed\");\n            // console.log(this.vm);\n\n            if (this.vm.onDestroy)\n                this.vm.onDestroy();\n        };\n\n        return component;\n    }\n}"]}