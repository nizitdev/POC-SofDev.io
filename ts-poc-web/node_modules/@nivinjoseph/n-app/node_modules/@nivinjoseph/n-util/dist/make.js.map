{"version":3,"file":"make.js","sourceRoot":"","sources":["../src/make.ts"],"names":[],"mappings":"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","sourcesContent":["import { given } from \"@nivinjoseph/n-defensive\";\n\n// public\nexport abstract class Make // static class\n{\n    private constructor() { }\n\n\n    public static retry<T>(func: (...params: any[]) => Promise<T>, numberOfRetries: number, errorPredicate?: (error: any) => boolean): (...params: any[]) => Promise<T>\n    {\n        given(func, \"func\").ensureHasValue().ensureIsFunction();\n        given(numberOfRetries, \"numberOfRetries\").ensureHasValue().ensureIsNumber().ensure(t => t > 0);\n        given(errorPredicate, \"errorPredicate\").ensureIsFunction();\n        \n        let numberOfAttempts = numberOfRetries + 1;\n        \n        let result = async function (...p: any[]): Promise<T>\n        {\n            let successful = false;\n            let attempts = 0;\n\n            let funcResult: any;\n            let error: any;\n\n            while (successful === false && attempts < numberOfAttempts)\n            {\n                attempts++;\n\n                try \n                {\n                    funcResult = await func(...p);\n                    successful = true;\n                }\n                catch (err)\n                {\n                    error = err;\n                    if (errorPredicate && !errorPredicate(error))\n                        break;\n                }\n            }\n\n            if (successful)\n                return funcResult;\n\n            throw error;\n        };\n\n        return result;\n    }\n\n    public static retryWithDelay<T>(func: (...params: any[]) => Promise<T>, numberOfRetries: number, delayMS: number, errorPredicate?: (error: any) => boolean): (...params: any[]) => Promise<T>\n    {\n        given(func, \"func\").ensureHasValue().ensureIsFunction();\n        given(numberOfRetries, \"numberOfRetries\").ensureHasValue().ensureIsNumber().ensure(t => t > 0);\n        given(errorPredicate, \"errorPredicate\").ensureIsFunction();\n        \n        let numberOfAttempts = numberOfRetries + 1;\n        \n        let result = async function (...p: any[]): Promise<T>\n        {\n            let successful = false;\n            let attempts = 0;\n\n            let funcResult: any;\n            let error: any;\n\n            let executeWithDelay = (delay: number) =>\n            {\n                return new Promise((resolve, reject) =>\n                {\n                    setTimeout(() =>\n                    {\n                        func(...p)\n                            .then(t => resolve(t))\n                            .catch(err => reject(err));\n                    }, delay);\n                });\n\n            };\n\n            while (successful === false && attempts < numberOfAttempts)\n            {\n                attempts++;\n\n                try \n                {\n                    funcResult = await executeWithDelay(attempts === 1 ? 0 : delayMS);\n                    successful = true;\n                }\n                catch (err)\n                {\n                    error = err;\n                    if (errorPredicate && !errorPredicate(error))\n                        break;\n                }\n            }\n\n            if (successful)\n                return funcResult;\n\n            throw error;\n        };\n\n        return result;\n    }\n\n    public static retryWithExponentialBackoff<T>(func: (...params: any[]) => Promise<T>, numberOfRetries: number, errorPredicate?: (error: any) => boolean): (...params: any[]) => Promise<T>\n    {\n        given(func, \"func\").ensureHasValue().ensureIsFunction();\n        given(numberOfRetries, \"numberOfRetries\").ensureHasValue().ensureIsNumber().ensure(t => t > 0);\n        given(errorPredicate, \"errorPredicate\").ensureIsFunction();\n        \n        let numberOfAttempts = numberOfRetries + 1;\n        \n        let result = async function (...p: any[]): Promise<T>\n        {\n            let successful = false;\n            let attempts = 0;\n            let delayMS = 0;\n\n            let funcResult: any;\n            let error: any;\n\n            let executeWithDelay = (delay: number) =>\n            {\n                return new Promise((resolve, reject) =>\n                {\n                    setTimeout(() =>\n                    {\n                        func(...p)\n                            .then(t => resolve(t))\n                            .catch(err => reject(err));\n                    }, delay);\n                });\n\n            };\n\n            while (successful === false && attempts < numberOfAttempts)\n            {\n                attempts++;\n\n                try \n                {\n                    funcResult = await executeWithDelay(delayMS);\n                    successful = true;\n                }\n                catch (err)\n                {\n                    error = err;\n                    if (errorPredicate && !errorPredicate(error))\n                        break;\n                    delayMS = (delayMS + Make.getRandomInt(200, 500)) * attempts;\n                }\n            }\n\n            if (successful)\n                return funcResult;\n\n            throw error;\n        };\n\n        return result;\n    }\n    \n    public static syncToAsync<T>(func: (...params: any[]) => T): (...params: any[]) => Promise<T>\n    {\n        given(func, \"func\").ensureHasValue().ensureIsFunction();\n        \n        let result = function (...p: any[]): Promise<T>\n        {\n            try \n            {\n                let val = func(...p);\n                return Promise.resolve(val);\n            }\n            catch (error)\n            {\n                return Promise.reject(error);\n            }\n        };\n        \n        return result;\n    }\n    \n    public static callbackToPromise<T>(func: (...params: any[]) => void): (...params: any[]) => Promise<T>\n    {\n        given(func, \"func\").ensureHasValue().ensureIsFunction();\n        \n        let result = function (...p: any[]): Promise<T>\n        {\n            let promise = new Promise<any>((resolve, reject) =>\n                func(...p, (err: Error, ...values: any[]) =>\n                    err\n                        ? reject(err)\n                        : values.length === 0\n                            ? resolve()\n                            : values.length === 1\n                                ? resolve(values[0])\n                                : resolve(values)));\n            \n            return promise;\n        };   \n        \n        return result;\n    }\n    \n    public static loop(func: () => void, numberOfTimes: number): void\n    {\n        given(func, \"func\").ensureHasValue().ensureIsFunction();\n        given(numberOfTimes, \"numberOfTimes\").ensureHasValue().ensureIsNumber().ensure(t => t > 0);\n        \n        for (let i = 0; i < numberOfTimes; i++)\n            func();  \n    }\n    \n    public static async loopAsync(asyncFunc: () => Promise<void>, numberOfTimes: number, degreesOfParallelism?: number): Promise<void>\n    {\n        given(asyncFunc, \"asyncFunc\").ensureHasValue().ensureIsFunction();\n        given(numberOfTimes, \"numberOfTimes\").ensureHasValue().ensureIsNumber().ensure(t => t > 0);\n        \n        let taskManager = new TaskManager<void>(numberOfTimes, asyncFunc, degreesOfParallelism, false);\n        await taskManager.execute();\n    }\n    \n    // public static errorSuppressed<T extends (...params: any[]) => U, U>(func: T, defaultValue: U = null): T\n    // {\n    //     given(func, \"func\").ensureHasValue().ensureIsFunction();\n        \n    //     const result = function (...p: any[]): any\n    //     {\n    //         try \n    //         {\n    //             return func(...p);\n    //         }\n    //         catch\n    //         {\n    //             return defaultValue;\n    //         }\n    //     };\n        \n    //     return <any>result;\n    // }\n    \n    // public static errorSuppressedAsync<T extends (...params: any[]) => Promise<U>, U>(asyncFunc: T, defaultValue: U = null): T\n    // {\n    //     given(asyncFunc, \"asyncFunc\").ensureHasValue().ensureIsFunction();\n\n    //     const result = async function (...p: any[]): Promise<any>\n    //     {\n    //         try \n    //         {\n    //             return await asyncFunc(...p);\n    //         }\n    //         catch\n    //         {\n    //             return defaultValue;\n    //         }\n    //     };\n\n    //     return <any>result;\n    // }\n\n    \n    private static getRandomInt(min: number, max: number): number\n    {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min)) + min; // The maximum is exclusive and the minimum is inclusive\n    }\n}\n\n\nclass TaskManager<T>\n{\n    private readonly _numberOfTimes: number;\n    private readonly _taskFunc: (input: T) => Promise<any>;\n    private readonly _taskCount: number;\n    private readonly _captureResults: boolean;\n    private readonly _tasks: Task<T>[];\n    private readonly _results: any[];\n\n\n    public constructor(numberOfTimes: number, taskFunc: (input: T) => Promise<any>, taskCount: number, captureResults: boolean)\n    {\n        this._numberOfTimes = numberOfTimes;\n        this._taskFunc = taskFunc;\n        this._taskCount = !taskCount || taskCount <= 0 ? numberOfTimes : taskCount;\n        this._captureResults = captureResults;\n\n        this._tasks = [];\n        for (let i = 0; i < this._taskCount; i++)\n            this._tasks.push(new Task<T>(this, i, this._taskFunc, captureResults));\n\n        if (this._captureResults)\n            this._results = [];\n    }\n\n\n    public async execute(): Promise<void>\n    {\n        for (let i = 0; i < this._numberOfTimes; i++)\n        {\n            if (this._captureResults)\n                this._results.push(null);\n            await this.executeTaskForItem(null, i);\n        }\n\n        await this.finish();\n    }\n\n    public addResult(itemIndex: number, result: any): void\n    {\n        this._results[itemIndex] = result;\n    }\n\n    public getResults(): any[]\n    {\n        return this._results;\n    }\n\n\n    private async executeTaskForItem(item: T, itemIndex: number): Promise<void>\n    {\n        let availableTask = this._tasks.find(t => t.isFree);\n        if (!availableTask)\n        {\n            let task = await Promise.race(this._tasks.map(t => t.promise));\n            task.free();\n            availableTask = task;\n        }\n\n        availableTask.execute(item, itemIndex);\n    }\n\n    private finish(): Promise<any>\n    {\n        return Promise.all(this._tasks.filter(t => !t.isFree).map(t => t.promise));\n    }\n}\n\nclass Task<T>\n{\n    private readonly _manager: TaskManager<T>;\n    // @ts-ignore\n    private readonly _id: number;\n    private readonly _taskFunc: (input: T) => Promise<any>;\n    private readonly _captureResult: boolean;\n    private _promise: Promise<Task<T>>;\n\n\n    public get promise(): Promise<Task<T>> { return this._promise; }\n    public get isFree(): boolean { return this._promise === null; }\n\n\n    public constructor(manager: TaskManager<T>, id: number, taskFunc: (input: T) => Promise<any>, captureResult: boolean)\n    {\n        this._manager = manager;\n        this._id = id;\n        this._taskFunc = taskFunc;\n        this._captureResult = captureResult;\n        this._promise = null;\n    }\n\n\n    public execute(item: T, itemIndex: number): void\n    {\n        this._promise = new Promise((resolve, reject) =>\n        {\n            this._taskFunc(item)\n                .then((result) =>\n                {\n                    if (this._captureResult)\n                        this._manager.addResult(itemIndex, result);\n                    resolve(this);\n                })\n                .catch((err) => reject(err));\n        });\n    }\n\n    public free(): void\n    {\n        this._promise = null;\n    }\n}"]}