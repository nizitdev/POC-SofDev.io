{"version":3,"file":"route-info.js","sourceRoot":"","sources":["../src/route-info.ts"],"names":[],"mappings":"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","sourcesContent":["import { given } from \"@nivinjoseph/n-defensive\";\nimport \"@nivinjoseph/n-ext\";\nimport { ApplicationException } from \"@nivinjoseph/n-exception\";\nimport { RouteParam } from \"./route-param\";\n\n// route format: /api/Product/{id:number}?{name?:string}&{all:boolean}\n\nexport class RouteInfo\n{\n    private readonly _routeTemplate: string;\n    private readonly _routeParams = new Array<RouteParam>();\n    private readonly _routeParamsRegistry: { [index: string]: RouteParam } = {};\n    private readonly _koaRoute: string;\n    private readonly _isCatchAll: boolean = false;\n    private _hasQuery: boolean;\n\n\n    public get route(): string { return this._routeTemplate; }\n    public get koaRoute(): string { return this._koaRoute; }\n    public get params(): ReadonlyArray<RouteParam> { return this._routeParams; }\n    public get isCatchAll(): boolean { return this._isCatchAll; }\n\n\n    public constructor(routeTemplate: string, isUrlGenerator = false) // true if used purely for url generation (only by utils)\n    {\n        given(routeTemplate, \"routeTemplate\")\n            .ensureHasValue()\n            .ensure(t => !t.isEmptyOrWhiteSpace());\n\n        routeTemplate = routeTemplate.trim().replaceAll(\" \", \"\");\n\n        if (!isUrlGenerator)\n        {\n            given(routeTemplate, \"routeTemplate\")\n                .ensure(t => t.startsWith(\"/\"), \"has to start with '/'\")\n                .ensure(t => !t.contains(\"//\"), \"cannot contain '//'\");\n\n            if (routeTemplate.length > 1 && routeTemplate.endsWith(\"/\"))\n                routeTemplate = routeTemplate.substr(0, routeTemplate.length - 1);\n        }\n\n        this._routeTemplate = routeTemplate;\n        \n        if (this._routeTemplate.contains(\"*\"))\n        {\n            this._isCatchAll = true;\n        }   \n        else\n        {\n            this.populateRouteParams();\n\n            if (!isUrlGenerator)\n                this._koaRoute = this.generateKoaRoute(this._routeTemplate);\n        }\n    }\n\n\n    public findRouteParam(key: string): RouteParam\n    {\n        given(key, \"key\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        return this._routeParamsRegistry[key.trim().toLowerCase()];\n    }\n\n    public generateUrl(values: Object): string\n    {\n        let url = this._routeTemplate;\n        let hasQuery = this._hasQuery;\n\n        for (let key in values)\n        {\n            let routeParam = this.findRouteParam(key);\n            if (routeParam)\n            {\n                let param = \"{\" + routeParam.param + \"}\";\n                let replacement = routeParam.isQuery\n                    ? \"{0}={1}\".format(key, encodeURIComponent(values.getValue(key)))\n                    : encodeURIComponent(values.getValue(key));\n                url = url.replace(param, replacement);\n            }\n            else\n            {\n                url = `${url}${hasQuery ? \"&\" : \"?\"}${\"{0}={1}\".format(key, encodeURIComponent(values.getValue(key)))}`;\n                hasQuery = true;\n            }\n        }\n\n        return url;\n    }\n\n\n    private populateRouteParams(): void\n    {\n        let index = 1;\n        for (let routeParam of this.extractTemplateParams(this._routeTemplate).map(t => new RouteParam(t)))\n        {\n            let key = routeParam.paramKey.toLowerCase();\n            if (this._routeParamsRegistry[key])\n                throw new ApplicationException(\"Invalid route template. Duplicate route params (case insensitive) detected.\");\n\n            routeParam.setOrder(index++);\n            this._routeParamsRegistry[key] = routeParam;\n            this._routeParams.push(routeParam);\n        }\n    }\n\n    private extractTemplateParams(routeTemplate: string): Array<string>\n    {\n        let templateParams = new Array<string>();\n        let queryFound = false;\n        let startFound = false;\n        let startIndex = 0;\n\n        for (let i = 0; i < routeTemplate.length; i++)\n        {\n            if (routeTemplate[i] === \"?\" && !startFound)\n            {\n                if (queryFound)\n                    throw new ApplicationException(\"Invalid route template. Unresolvable '?' characters detected.\");\n\n                queryFound = true;\n            }\n\n            if (routeTemplate[i] === \"{\")\n            {\n                if (startFound)\n                    throw new ApplicationException(\"Invalid route template. Braces do not match.\");\n\n                startFound = true;\n                startIndex = i + 1;\n            }\n            else if (routeTemplate[i] === \"}\")\n            {\n                if (!startFound)\n                    throw new ApplicationException(\"Invalid route template. Braces do not match.\");\n\n                let value = routeTemplate.substring(startIndex, i);\n                value = value.trim();\n                if (queryFound) value = value + \"[Q]\";\n                templateParams.push(value);\n                startFound = false;\n            }\n        }\n\n        this._hasQuery = queryFound;\n\n        return templateParams;\n    }\n\n    private generateKoaRoute(routeTemplate: string): string\n    {\n        for (let routeParam of this._routeParams)\n        {\n            let asItWas = \"{\" + routeParam.param + \"}\";\n            if (!routeTemplate.contains(asItWas))\n                throw new ApplicationException(\"Invalid route template.\");\n\n            routeTemplate = routeTemplate.replace(asItWas, \":{0}\".format(routeParam.paramKey));\n        }\n\n        if (routeTemplate.contains(\"?\"))\n        {\n            let splitted = routeTemplate.split(\"?\");\n            if (splitted.length > 2)\n                throw new ApplicationException(\"Invalid route template. Unresolvable '?' characters detected.\");\n\n            routeTemplate = splitted[0];\n        }\n\n        return routeTemplate;\n    }\n}"]}