{"version":3,"file":"asymmetric-encryption.js","sourceRoot":"","sources":["../../src/crypto/asymmetric-encryption.ts"],"names":[],"mappings":"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","sourcesContent":["const ursa = require(\"ursa\");\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport \"@nivinjoseph/n-ext\";\n\n\n// public\nexport class AsymmetricEncryption\n{\n    private constructor() { }\n    \n    \n    public static generateKeyPair(): Promise<string>\n    {\n        const key = ursa.generatePrivateKey();\n        return Promise.resolve(key.toPrivatePem().toString(\"hex\").toUpperCase());\n    }\n    \n    public static getPublicKey(keyPair: string): Promise<string>\n    {\n        given(keyPair, \"keyPair\").ensureHasValue().ensureIsString().ensure(t => !t.isEmptyOrWhiteSpace());\n        \n        keyPair = keyPair.trim();\n        \n        const key = ursa.createPrivateKey(Buffer.from(keyPair, \"hex\"));\n        return Promise.resolve(key.toPublicPem().toString(\"hex\").toUpperCase());\n    }\n    \n    public static encrypt(keyPairOrPublicKey: string, value: string): Promise<string>\n    {\n        given(keyPairOrPublicKey, \"keyPairOrPublicKey\").ensureHasValue().ensureIsString().ensure(t => !t.isEmptyOrWhiteSpace());\n        given(value, \"value\").ensureHasValue().ensureIsString().ensure(t => !t.isEmptyOrWhiteSpace());\n\n        keyPairOrPublicKey = keyPairOrPublicKey.trim();\n        value = value.trim();\n        \n        const buf = Buffer.from(keyPairOrPublicKey, \"hex\");    \n        let key;\n        try \n        {\n            key = ursa.createPublicKey(buf);\n        }\n        catch (error)\n        {\n            key = ursa.createPrivateKey(buf);\n        }\n        const encrypted = key.encrypt(Buffer.from(value, \"utf8\"), \"utf8\", \"hex\", ursa.RSA_PKCS1_PADDING);\n        return Promise.resolve(encrypted.toUpperCase());\n    }\n    \n    public static decrypt(keyPair: string, value: string): Promise<string>\n    {\n        given(keyPair, \"keyPair\").ensureHasValue().ensureIsString().ensure(t => !t.isEmptyOrWhiteSpace());\n        given(value, \"value\").ensureHasValue().ensureIsString().ensure(t => !t.isEmptyOrWhiteSpace());\n\n        keyPair = keyPair.trim();\n        value = value.trim();\n        \n        const key = ursa.createPrivateKey(Buffer.from(keyPair, \"hex\"));\n        const decrypted = key.decrypt(Buffer.from(value, \"hex\"), \"hex\", \"utf8\", ursa.RSA_PKCS1_PADDING); \n        return Promise.resolve(decrypted);\n    }\n}"]}