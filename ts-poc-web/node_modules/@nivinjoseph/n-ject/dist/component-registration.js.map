{"version":3,"file":"component-registration.js","sourceRoot":"","sources":["../src/component-registration.ts"],"names":[],"mappings":";;AAAA,iDAA2C;AAC3C,0DAAiD;AACjD,4BAA0B;AAC1B,qCAAwC;AAGxC,MAAa,qBAAqB;IAQ9B,IAAW,GAAG,KAAa,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9C,IAAW,SAAS,KAAe,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IAC5D,IAAW,SAAS,KAAgB,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IAC7D,IAAW,YAAY,KAAoB,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;IAGvE,YAAmB,GAAW,EAAE,SAAmB,EAAE,SAAoB;QAErE,mBAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QACzE,mBAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,cAAc,EAAE,CAAC;QAC/C,mBAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,cAAc,EAAE,CAAC;QAE/C,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;IAChD,CAAC;IAGO,eAAe;QAEnB,IAAI,IAAI,CAAC,UAAU,KAAK,wBAAS,CAAC,QAAQ;YACtC,OAAO,IAAI,KAAK,EAAU,CAAC;QAO/B,OAAO,OAAO,CAAC,cAAc,CAAC,qBAAY,EAAE,IAAI,CAAC,UAAU,CAAC;YACxD,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,qBAAY,EAAE,IAAI,CAAC,UAAU,CAAC;YACvD,CAAC,CAAC,IAAI,KAAK,EAAU,CAAC;IAC9B,CAAC;CAuCJ;AA/ED,sDA+EC","sourcesContent":["import { Lifestyle } from \"./lifestyle.js\"; \nimport { given } from \"@nivinjoseph/n-defensive\";\nimport \"reflect-metadata\";\nimport { injectSymbol } from \"./inject\";\n\n// internal\nexport class ComponentRegistration\n{\n    private readonly _key: string;\n    private readonly _component: Function;\n    private readonly _lifestyle: Lifestyle;\n    private readonly _dependencies: Array<string>;\n\n\n    public get key(): string { return this._key; }\n    public get component(): Function { return this._component; }\n    public get lifestyle(): Lifestyle { return this._lifestyle; }\n    public get dependencies(): Array<string> { return this._dependencies; }\n\n\n    public constructor(key: string, component: Function, lifestyle: Lifestyle)\n    {\n        given(key, \"key\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        given(component, \"component\").ensureHasValue();\n        given(lifestyle, \"lifestyle\").ensureHasValue();\n        \n        this._key = key;\n        this._component = component;\n        this._lifestyle = lifestyle;\n        this._dependencies = this.getDependencies();\n    }\n\n    \n    private getDependencies(): string[]\n    {\n        if (this._lifestyle === Lifestyle.Instance)\n            return new Array<string>();    \n        \n        // if (Reflect.hasOwnMetadata(injectSymbol, this._component))\n        //     return Reflect.getOwnMetadata(injectSymbol, this._component);\n        // else\n        //     return this.detectDependencies();    \n        \n        return Reflect.hasOwnMetadata(injectSymbol, this._component)\n            ? Reflect.getOwnMetadata(injectSymbol, this._component)\n            : new Array<string>();\n    }\n\n    \n    // Borrowed from AngularJS implementation\n    // private detectDependencies(): Array<string>\n    // {\n    //     const FN_ARG_SPLIT = /,/;\n    //     const FN_ARG = /^\\s*(_?)(\\S+?)\\1\\s*$/;\n\n    //     let dependencies = new Array<string>();\n\n    //     let argDecl = this.extractArgs(this._component);\n    //     argDecl[1].split(FN_ARG_SPLIT).forEach(arg =>\n    //     {\n    //         arg.replace(FN_ARG, (all, underscore, name) =>\n    //         {\n    //             dependencies.push(name);\n    //             return undefined;\n    //         });\n    //     });\n\n    //     return dependencies;\n    // }\n\n    // private stringifyFn(fn: Function): string\n    // {\n    //     return Function.prototype.toString.call(fn);\n    // }\n\n    // private extractArgs(fn: Function): RegExpMatchArray\n    // {\n    //     const ARROW_ARG = /^([^(]+?)=>/;\n    //     const FN_ARGS = /^[^(]*\\(\\s*([^)]*)\\)/m;\n    //     const STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\n    //     let fnText = this.stringifyFn(fn).replace(STRIP_COMMENTS, \"\");\n    //     let args = fnText.match(ARROW_ARG) || fnText.match(FN_ARGS);\n    //     return args;\n    // }\n}"]}