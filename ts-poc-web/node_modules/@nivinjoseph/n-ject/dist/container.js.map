{"version":3,"file":"container.js","sourceRoot":"","sources":["../src/container.ts"],"names":[],"mappings":";;AAAA,0DAAiD;AAEjD,6CAAyC;AACzC,6DAAyD;AACzD,6CAAyC;AACzC,2CAAwC;AACxC,+CAA2C;AAG3C,0DAAqE;AAGrE,MAAa,SAAU,SAAQ,sBAAS;IAEpC;QAEI,KAAK,CAAC,sBAAS,CAAC,IAAI,EAAE,IAAI,sCAAiB,EAAE,EAAE,IAAI,CAAC,CAAC;IACzD,CAAC;IAEM,iBAAiB,CAAC,GAAW,EAAE,SAAmB;QAErD,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,SAAS,EAAE,qBAAS,CAAC,SAAS,CAAC,CAAC;QACnD,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,cAAc,CAAC,GAAW,EAAE,SAAmB;QAElD,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,SAAS,EAAE,qBAAS,CAAC,MAAM,CAAC,CAAC;QAChD,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,iBAAiB,CAAC,GAAW,EAAE,SAAmB;QAErD,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,SAAS,EAAE,qBAAS,CAAC,SAAS,CAAC,CAAC;QACnD,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,gBAAgB,CAAC,GAAW,EAAE,QAAa;QAE9C,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,EAAE,qBAAS,CAAC,QAAQ,CAAC,CAAC;QACjD,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,OAAO,CAAC,kBAAsC;QAEjD,IAAI,IAAI,CAAC,cAAc;YACnB,MAAM,IAAI,uCAAyB,CAAC,yBAAyB,CAAC,CAAC;QAEnE,mBAAK,CAAC,kBAAkB,EAAE,oBAAoB,CAAC,CAAC,cAAc,EAAE,CAAC;QACjE,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjC,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,WAAW;QAEd,IAAI,CAAC,IAAI,CAAC,cAAc;YACpB,MAAM,IAAI,uCAAyB,CAAC,6BAA6B,CAAC,CAAC;QAEvE,OAAO,IAAI,wBAAU,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;IACxD,CAAC;IAEM,SAAS;QAEZ,IAAI,IAAI,CAAC,cAAc;YACnB,MAAM,IAAI,uCAAyB,CAAC,2BAA2B,CAAC,CAAC;QAErE,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,CAAC;QAE7C,KAAK,CAAC,SAAS,EAAE,CAAC;IACtB,CAAC;IAEO,QAAQ,CAAC,GAAW,EAAE,SAAmB,EAAE,SAAoB;QAEnE,IAAI,IAAI,CAAC,cAAc;YACnB,MAAM,IAAI,uCAAyB,CAAC,0BAA0B,CAAC,CAAC;QAEpE,mBAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QACzE,mBAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,cAAc,EAAE,CAAC;QAC/C,mBAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,cAAc,EAAE,CAAC;QAE/C,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,GAAG,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;IAC/D,CAAC;CACJ;AAtED,8BAsEC","sourcesContent":["import { given } from \"@nivinjoseph/n-defensive\";\nimport { Scope } from \"./scope\";\nimport { BaseScope } from \"./base-scope\";\nimport { ComponentRegistry } from \"./component-registry\";\nimport { ScopeType } from \"./scope-type\";\nimport { Lifestyle } from \"./lifestyle\";\nimport { ChildScope } from \"./child-scope\";\nimport { ComponentInstaller } from \"./component-installer\";\nimport { Registry } from \"./registry\";\nimport { InvalidOperationException } from \"@nivinjoseph/n-exception\";\n\n// public\nexport class Container extends BaseScope implements Registry\n{\n    public constructor()\n    {\n        super(ScopeType.Root, new ComponentRegistry(), null);\n    }\n\n    public registerTransient(key: string, component: Function): Registry\n    {\n        this.register(key, component, Lifestyle.Transient);\n        return this;\n    }\n    \n    public registerScoped(key: string, component: Function): Registry\n    {\n        this.register(key, component, Lifestyle.Scoped);\n        return this;\n    }\n    \n    public registerSingleton(key: string, component: Function): Registry\n    {\n        this.register(key, component, Lifestyle.Singleton);\n        return this;\n    }\n    \n    public registerInstance(key: string, instance: any): Registry\n    {\n        this.register(key, instance, Lifestyle.Instance);\n        return this;\n    }\n    \n    public install(componentInstaller: ComponentInstaller): Container\n    {\n        if (this.isBootstrapped)\n            throw new InvalidOperationException(\"install after bootstrap\");    \n        \n        given(componentInstaller, \"componentInstaller\").ensureHasValue();\n        componentInstaller.install(this);\n        return this;\n    }\n\n    public createScope(): Scope\n    {\n        if (!this.isBootstrapped)\n            throw new InvalidOperationException(\"createScope after bootstrap\");\n        \n        return new ChildScope(this.componentRegistry, this);\n    }\n\n    public bootstrap(): void\n    {\n        if (this.isBootstrapped)\n            throw new InvalidOperationException(\"bootstrap after bootstrap\");\n\n        this.componentRegistry.verifyRegistrations();\n        \n        super.bootstrap();\n    }\n    \n    private register(key: string, component: Function, lifestyle: Lifestyle): void\n    {\n        if (this.isBootstrapped)\n            throw new InvalidOperationException(\"register after bootstrap\");\n\n        given(key, \"key\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        given(component, \"component\").ensureHasValue();\n        given(lifestyle, \"lifestyle\").ensureHasValue();\n\n        this.componentRegistry.register(key, component, lifestyle);\n    }\n}"]}