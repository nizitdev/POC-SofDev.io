{"version":3,"file":"console-logger.js","sourceRoot":"","sources":["../src/console-logger.ts"],"names":[],"mappings":";;AAEA,iCAAiC;AACjC,oDAA6D;AAE7D,0CAA0C;AAC1C,6DAAuD;AACvD,8BAA4B;AAI5B,MAAa,aAAa;IAItB,YAAmB,eAAiC;QAEhD,IAAI,CAAC,eAAe,IAAI,eAAe,CAAC,mBAAmB,EAAE;YACzD,CAAC,CAAC,oCAAe,CAAC,GAAG,EAAE,oCAAe,CAAC,KAAK,EAAE,oCAAe,CAAC,GAAG,EAAE,oCAAe,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC,EACrH;YACI,IAAI,CAAC,gBAAgB,GAAG,oCAAe,CAAC,GAAG,CAAC;SAC/C;aAED;YACI,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;SAC3C;IACL,CAAC;IAGM,QAAQ,CAAC,KAAa;QAEzB,IAAI,+BAAoB,CAAC,SAAS,CAAS,KAAK,CAAC,KAAK,KAAK;YACvD,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,WAAW,KAAK,EAAE,CAAC,CAAC,CAAC;QACtE,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAEM,OAAO,CAAC,IAAY;QAEvB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,UAAU,IAAI,EAAE,CAAC,CAAC,CAAC;QACjE,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAEM,UAAU,CAAC,OAAe;QAE7B,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,aAAa,OAAO,EAAE,CAAC,CAAC,CAAC;QACxE,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAEM,QAAQ,CAAC,KAAyB;QAErC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,WAAW,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;QAC5E,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAGO,WAAW;QAEf,IAAI,MAAM,GAAW,IAAI,CAAC;QAE1B,QAAQ,IAAI,CAAC,gBAAgB,EAC7B;YACI,KAAK,oCAAe,CAAC,GAAG;gBACpB,MAAM,GAAG,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC;gBACjC,MAAM;YACV,KAAK,oCAAe,CAAC,KAAK;gBACtB,MAAM,GAAG,MAAM,EAAE,CAAC,MAAM,EAAE,CAAC;gBAC3B,MAAM;YACV,KAAK,oCAAe,CAAC,GAAG;gBACpB,MAAM,GAAG,MAAM,EAAE,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC,MAAM,EAAE,CAAC;gBAClD,MAAM;YACV,KAAK,oCAAe,CAAC,GAAG;gBACpB,MAAM,GAAG,MAAM,EAAE,CAAC,EAAE,CAAC,qBAAqB,CAAC,CAAC,MAAM,EAAE,CAAC;gBACrD,MAAM;YACV;gBACI,MAAM,GAAG,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC;gBACjC,MAAM;SACb;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;CACJ;AArED,sCAqEC","sourcesContent":["import { Logger } from \"./logger\";\nimport { Exception } from \"@nivinjoseph/n-exception\";\nimport * as Colors from \"colors\";\nimport { ConfigurationManager } from \"@nivinjoseph/n-config\";\n// @ts-ignore\nimport * as moment from \"moment-timezone\";\nimport { LogDateTimeZone } from \"./log-date-time-zone\";\nimport \"@nivinjoseph/n-ext\";\n\n\n// public\nexport class ConsoleLogger implements Logger\n{\n    private readonly _logDateTimeZone: LogDateTimeZone;\n    \n    public constructor(logDateTimeZone?: LogDateTimeZone)\n    {\n        if (!logDateTimeZone || logDateTimeZone.isEmptyOrWhiteSpace() ||\n            ![LogDateTimeZone.utc, LogDateTimeZone.local, LogDateTimeZone.est, LogDateTimeZone.pst].contains(logDateTimeZone))\n        {\n            this._logDateTimeZone = LogDateTimeZone.utc;\n        }\n        else\n        {\n            this._logDateTimeZone = logDateTimeZone;\n        }   \n    }\n    \n    \n    public logDebug(debug: string): Promise<void>\n    {\n        if (ConfigurationManager.getConfig<string>(\"env\") === \"dev\")\n            console.log(Colors.grey(`${this.getDateTime()} DEBUG: ${debug}`));\n        return Promise.resolve();\n    }\n    \n    public logInfo(info: string): Promise<void>\n    {\n        console.log(Colors.green(`${this.getDateTime()} INFO: ${info}`));\n        return Promise.resolve();\n    }\n\n    public logWarning(warning: string): Promise<void>\n    {\n        console.log(Colors.yellow(`${this.getDateTime()} WARNING: ${warning}`));\n        return Promise.resolve();\n    }\n\n    public logError(error: string | Exception): Promise<void>\n    {\n        console.log(Colors.red(`${this.getDateTime()} ERROR: ${error.toString()}`));\n        return Promise.resolve();\n    }\n    \n    \n    private getDateTime(): string\n    {\n        let result: string = null;\n        \n        switch (this._logDateTimeZone)\n        {\n            case LogDateTimeZone.utc:\n                result = moment().utc().format();    \n                break;\n            case LogDateTimeZone.local:\n                result = moment().format();    \n                break;\n            case LogDateTimeZone.est:\n                result = moment().tz(\"America/New_York\").format();\n                break;\n            case LogDateTimeZone.pst:\n                result = moment().tz(\"America/Los_Angeles\").format();\n                break;    \n            default:\n                result = moment().utc().format();\n                break;    \n        }\n        \n        return result;\n    }\n}"]}