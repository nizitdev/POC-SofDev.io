{"version":3,"file":"object-ext.js","sourceRoot":"","sources":["../src/object-ext.ts"],"names":[],"mappings":"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","sourcesContent":["class ObjectExt\n{\n    // public static mapToObject(source: any, factoryFunc: () => any): any\n    // {\n    //     let target = factoryFunc();\n    //     source = JSON.parse(JSON.stringify(source));\n        \n    //     for (let key in source)\n    //     {\n    //         if (source.hasOwnProperty(key) && typeof source[key] !== \"function\" && typeof target[key] !== \"function\")\n    //         {\n    //             target[key] = source[key];\n    //         }\n    //     }\n        \n    //     return target;\n    // }\n    \n    // public static merge(target: object, source: object): void\n    // {\n    //     Object.assign(target, source);\n    // }\n    \n    public static getTypeName(source: any): string \n    {\n        let getName = (funcDef: string) =>\n        {\n            let name = funcDef.trim();\n            if (ObjectExt.stringStartsWith(name, \"function\"))\n            {\n                name = name.substr(\"function\".length);\n                name = name.substr(0, name.indexOf(\"(\"));\n            }    \n            else if (ObjectExt.stringStartsWith(name, \"class\"))\n            {\n                name = name.substr(\"class\".length);\n                name = name.substr(0, name.indexOf(\"{\")).trim();\n                if (ObjectExt.stringContains(name, \" \"))\n                    name = name.split(\" \")[0];\n            }    \n            return name.trim();\n        };\n        \n        if (typeof source === \"object\")\n        {\n            let value = getName(source.constructor.toString());\n            if (value === \"n Object\") return \"Object\";\n            else return value;\n        }\n        else if (typeof source === \"function\")\n        {\n            return getName(source.toString());\n        }\n\n        return (typeof source);\n    }\n    \n    public static getValue(source: any, key: string): any\n    {\n        if (key == null || ObjectExt.stringIsWhiteSpace(key)) return source;\n        key = key.trim();\n        if (!ObjectExt.stringContains(key, \".\"))\n            return source[key] === undefined ? null : source[key];\n        \n        let splitted = key.split(\".\").map(t => t.trim());\n        let current = source;\n\n        for (let i = 0; i < splitted.length; i++)\n        {\n            if (current === null || current === undefined) return null;\n            current = current[splitted[i]];\n        }\n        return current === undefined ? null : current;\n    }\n    \n    public static setValue(target: any, key: string, value: any): void\n    {\n        if (key == null || ObjectExt.stringIsWhiteSpace(key)) return;\n        key = key.trim();\n        value = value === undefined ? null : value;\n        if (!ObjectExt.stringContains(key, \".\")) target[key] = value;\n        \n        let splitted = key.split(\".\").map(t => t.trim());\n        let current = target;\n        \n        for (let i = 0; i < splitted.length - 1; i++)\n        {\n            let next = current[splitted[i]]; \n            if (next === null || next === undefined) next = {};\n            current[splitted[i]] = next;\n            current = next;\n        }\n        \n        current[splitted[splitted.length - 1]] = value;\n    }\n\n    public static serialize(source: any, ...keys: Array<string>): object\n    {\n        const keyMaps = keys.map(t =>\n        {\n            if (ObjectExt.stringContains(t, \" as \"))\n            {\n                const splitted = t.split(\" as \");\n                return {\n                    sourceKey: splitted[0].trim(),\n                    targetKey: splitted[1].trim()\n                };\n            }\n            \n            return {\n                sourceKey: t,\n                targetKey: t\n            };\n        });\n\n        const target = {};\n\n        keyMaps.forEach(t =>\n        {\n            const value = ObjectExt.getValue(source, t.sourceKey);\n            ObjectExt.setValue(target, t.targetKey, value);\n        });\n\n        return target;\n    }\n\n    public static deserialize(source: any, targetClassOrObject: Function | object, ...keysOrValues: Array<any>): object\n    {\n        if (typeof (targetClassOrObject) === \"function\")\n        {\n            const values = keysOrValues.map(t =>\n            {\n                if (typeof (t) === \"string\")\n                {\n                    const key = t.trim();\n                    return key[0] === \":\" ? key.substr(1) : ObjectExt.getValue(source, key);\n                }\n\n                return t;\n            });\n\n            return new (<any>targetClassOrObject)(...values);\n        }\n        else\n        {\n            keysOrValues.forEach(t =>\n            {\n                const value = ObjectExt.getValue(source, t);\n                ObjectExt.setValue(targetClassOrObject, t, value); \n            });   \n\n            return targetClassOrObject;\n        }\n    }\n    \n\n    private static stringIsWhiteSpace(value: string): boolean\n    {\n        return value.trim().length === 0;\n    }\n\n    private static stringContains(primary: string, sub: string): boolean\n    {\n        return primary.indexOf(sub) !== -1;\n    }\n    \n    private static stringStartsWith(primary: string, sub: string): boolean\n    {\n        return primary.indexOf(sub) === 0;\n    }\n}\n\n\n// Object.defineProperty(Object.prototype, \"mapToObject\", {\n//     configurable: false,\n//     enumerable: false,\n//     writable: false,\n//     value: function (factoryFunc: () => any): any\n//     {\n//         return ObjectExt.mapToObject(this, factoryFunc);\n//     }\n// });\n\n// Object.defineProperty(Object.prototype, \"merge\", {\n//     configurable: false,\n//     enumerable: false,\n//     writable: false,\n//     value: function (value: object): void\n//     {\n//         ObjectExt.merge(this, value);\n//     }\n// });\n\nObject.defineProperty(Object.prototype, \"getTypeName\", {\n    configurable: false,\n    enumerable: false,\n    writable: false,\n    value: function (): string\n    {\n        return ObjectExt.getTypeName(this);\n    }\n});\n\nObject.defineProperty(Object.prototype, \"getValue\", {\n    configurable: false,\n    enumerable: false,\n    writable: true,  // for webpack compatibility\n    value: function (key: string): any\n    {\n        return ObjectExt.getValue(this, key);\n    }\n});\n\nObject.defineProperty(Object.prototype, \"setValue\", {\n    configurable: false,\n    enumerable: false,\n    writable: true, // for webpack compatibility\n    value: function (key: string, value: any): void\n    {\n        ObjectExt.setValue(this, key, value);\n    }\n});\n\nObject.defineProperty(Object.prototype, \"serializeObject\", {\n    configurable: false,\n    enumerable: false,\n    writable: false,\n    value: function (...keys: Array<string>): object\n    {\n        return ObjectExt.serialize(this, ...keys);\n    }\n});\n\nObject.defineProperty(Object.prototype, \"deserializeObject\", {\n    configurable: false,\n    enumerable: false,\n    writable: false,\n    value: function (targetClassOrObject: Function | object, ...keysOrValues: Array<any>): object\n    {\n        return ObjectExt.deserialize(this, targetClassOrObject, ...keysOrValues);\n    }\n});"]}