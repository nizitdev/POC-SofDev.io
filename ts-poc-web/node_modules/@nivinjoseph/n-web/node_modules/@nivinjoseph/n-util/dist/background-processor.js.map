{"version":3,"file":"background-processor.js","sourceRoot":"","sources":["../src/background-processor.ts"],"names":[],"mappings":"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","sourcesContent":["import { given } from \"@nivinjoseph/n-defensive\";\nimport { Delay } from \"./delay\";\nimport { Disposable } from \"./disposable\";\n\n// public\nexport class BackgroundProcessor implements Disposable\n{\n    private readonly _defaultErrorHandler: (e: Error) => Promise<void>;\n    private readonly _breakIntervalMilliseconds: number;\n    private readonly _breakOnlyWhenNoWork: boolean;\n    private readonly _actionsToProcess: Array<Action> = new Array<Action>();\n    private readonly _actionsExecuting: Array<Action> = new Array<Action>();\n    private _isDisposed: boolean = false;\n\n\n    public get queueLength(): number { return this._actionsToProcess.length; }\n\n\n    public constructor(defaultErrorHandler: (e: Error) => Promise<void>, breakIntervalMilliseconds: number = 1000, breakOnlyWhenNoWork = true)\n    {\n        given(defaultErrorHandler, \"defaultErrorHandler\").ensureHasValue().ensureIsFunction();\n        given(breakIntervalMilliseconds, \"breakIntervalMilliseconds\").ensureHasValue().ensureIsNumber().ensure(t => t >= 0);\n        given(breakOnlyWhenNoWork, \"breakOnlyWhenNoWork\").ensureHasValue().ensureIsBoolean();\n\n        this._defaultErrorHandler = defaultErrorHandler;\n        this._breakIntervalMilliseconds = breakIntervalMilliseconds || 0;\n        this._breakOnlyWhenNoWork = breakOnlyWhenNoWork;\n\n        this.initiateBackgroundProcessing();\n    }\n\n\n    public processAction(action: () => Promise<void>, errorHandler?: (e: Error) => Promise<void>): void\n    {\n        given(action, \"action\").ensureHasValue().ensureIsFunction();\n        given(errorHandler, \"errorHandler\").ensureIsFunction();\n\n        this._actionsToProcess.push(new Action(action, errorHandler || this._defaultErrorHandler));\n    }\n\n    public async dispose(killQueue = false): Promise<void>\n    {\n        this._isDisposed = true;\n\n        if (!killQueue)\n        {\n            while (this._actionsToProcess.length > 0)\n            {\n                const action = this._actionsToProcess.shift();\n                this._actionsExecuting.push(action);\n                action.execute(() => this._actionsExecuting.remove(action));\n            }\n        }\n\n        while (this._actionsExecuting.length > 0)\n            await Delay.seconds(3);\n    }\n\n\n    private initiateBackgroundProcessing()\n    {\n        if (this._isDisposed)\n            return;\n\n        let timeout = this._breakIntervalMilliseconds;\n        if (this._breakOnlyWhenNoWork && this._actionsToProcess.length > 0)\n            timeout = 0;\n\n        setTimeout(() =>\n        {\n            if (this._actionsToProcess.length > 0)\n            {\n                const action = this._actionsToProcess.shift();\n                this._actionsExecuting.push(action);\n                action.execute(() =>\n                {\n                    this._actionsExecuting.remove(action);\n                    this.initiateBackgroundProcessing();\n                });\n            }\n            else\n            {\n                this.initiateBackgroundProcessing();\n            }\n        }, timeout);\n    }\n}\n\n\nclass Action\n{\n    private readonly _action: () => Promise<void>;\n    private readonly _errorHandler: (e: Error) => Promise<void>;\n\n\n    public constructor(action: () => Promise<void>, errorHandler: (e: Error) => Promise<void>)\n    {\n        given(action, \"action\").ensureHasValue().ensureIsFunction();\n        given(errorHandler, \"errorHandler\").ensureHasValue().ensureIsFunction();\n\n        this._action = action;\n        this._errorHandler = errorHandler;\n    }\n\n\n    public execute(postExecuteCallback: () => void): void\n    {\n        given(postExecuteCallback, \"postExecuteCallback\").ensureHasValue().ensureIsFunction();\n\n        try \n        {\n            this._action()\n                .then(() =>\n                {\n                    postExecuteCallback();\n                })\n                .catch((error) =>\n                {\n                    try \n                    {\n                        this._errorHandler(error)\n                            .then(() => postExecuteCallback())\n                            .catch((error) =>\n                            {\n                                console.error(error);\n                                postExecuteCallback();\n                            });\n                    }\n                    catch (error)\n                    {\n                        console.error(error);\n                        postExecuteCallback();\n                    }\n                });\n        }\n        catch (error)\n        {\n            try \n            {\n                this._errorHandler(error)\n                    .then(() => postExecuteCallback())\n                    .catch((error) =>\n                    {\n                        console.error(error);\n                        postExecuteCallback();\n                    });\n            }\n            catch (error)\n            {\n                console.error(error);\n                postExecuteCallback();\n            }\n        }\n    }\n}"]}