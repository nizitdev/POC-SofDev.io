{"version":3,"file":"route.js","sourceRoot":"","sources":["../src/route.ts"],"names":[],"mappings":";;AAAA,4BAA0B;AAC1B,0DAAiD;AACjD,8BAA4B;AAGf,QAAA,eAAe,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;AAGnD,SAAgB,KAAK,CAAC,KAAa;IAE/B,mBAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,cAAc,EAAE;SACjC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,EAAE,+BAA+B,CAAC;SACtE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,uBAAuB,CAAC,CAAC;IAEpE,OAAO,CAAC,MAAgB,EAAE,EAAE,CAAC,OAAO,CAAC,cAAc,CAAC,uBAAe,EAAE,KAAK,CAAC,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;AAC/F,CAAC;AAPD,sBAOC","sourcesContent":["import \"reflect-metadata\";\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport \"@nivinjoseph/n-ext\";\n\n\nexport const httpRouteSymbol = Symbol(\"httpRoute\");\n\n// public\nexport function route(route: string): Function\n{\n    given(route, \"route\").ensureHasValue()\n        .ensure(t => !t.isEmptyOrWhiteSpace(), \"cannot be empty or whitespace\")\n        .ensure(t => t.trim().startsWith(\"/\"), \"has to begin with '/'\");\n    \n    return (target: Function) => Reflect.defineMetadata(httpRouteSymbol, route.trim(), target);\n}"]}