{"version":3,"file":"local-teacher-service.js","sourceRoot":"","sources":["local-teacher-service.ts"],"names":[],"mappings":";;AAEA,0DAAiD;AAGjD,MAAa,mBAAmB;IAK5B;QACI,MAAM,OAAO,GAAG,IAAI,KAAK,EAAQ,CAAC;QAClC,MAAM,KAAK,GAAG,EAAE,CAAC;QAEjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;YAC5B,OAAO,CAAC,IAAI,CAAC;gBACT,EAAE,EAAE,IAAI,GAAG,CAAC;gBACZ,IAAI,EAAE,SAAS,GAAG,CAAC;gBACnB,QAAQ,EAAE,EAAE,GAAG,CAAC;gBAChB,OAAO,EAAE,IAAI;gBACb,aAAa,EAAE,IAAI;gBACnB,QAAQ,EAAG,UAAU;gBACrB,SAAS,EAAE,KAAK;aACnB,CAAC,CAAC;SACN;QAED,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAE5B,CAAC;IAGM,WAAW;QACd,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAEM,UAAU,CAAC,EAAU;QACxB,mBAAK,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;QAElD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;IACjE,CAAC;CAkDJ;AApFD,kDAoFC","sourcesContent":["import { TeacherService } from \"../teacher/teacher-service\";\r\nimport { User } from \"../../../models/school/user\";\r\nimport { given } from \"@nivinjoseph/n-defensive\";\r\n\r\n\r\nexport class LocalTeacherService implements TeacherService {\r\n    private readonly _teacher: Array<User>;\r\n   // private _counter: number;\r\n\r\n\r\n    public constructor() {\r\n        const teacher = new Array<User>();\r\n        const count = 10;\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            teacher.push({\r\n                id: \"id\" + i,\r\n                name: \"teacher\" + i,\r\n                userName: \"\" + i,\r\n                IsAdmin: true,\r\n                classInCharge: null,\r\n                password : \"12345678\",\r\n                isDeleted: false\r\n            });\r\n        }\r\n\r\n        this._teacher = teacher;\r\n      //  this._counter = count;\r\n    }\r\n\r\n\r\n    public getTeachers(): Promise<ReadonlyArray<User>> {\r\n        return Promise.resolve(this._teacher);\r\n    }\r\n\r\n    public getTeacher(id: string): Promise<User> {\r\n        given(id, \"id\").ensureHasValue().ensureIsString();\r\n\r\n        return Promise.resolve(this._teacher.find(t => t.id === id));\r\n    }\r\n\r\n    // public createTeacher(firstName: string, lastName: string, dateOfBirth: string, sex: string, address: string): Promise<Teacher> {\r\n    //     given(firstName, \"firstName\").ensureHasValue().ensureIsString();\r\n    //     given(lastName, \"lastName\").ensureIsString();\r\n    //     given(dateOfBirth, \"dateOfBirth\").ensureHasValue().ensureIsString();\r\n    //     given(sex, \"sex\").ensureIsString();\r\n    //     given(address, \"address\").ensureIsString();\r\n\r\n    //     const teacher: Teacher = {\r\n    //         id: \"id\" + this._counter,\r\n    //         address: address,\r\n    //         dateOfBirth: dateOfBirth,\r\n    //         firstName: firstName,\r\n    //         lastName: lastName,\r\n    //         sex: sex,\r\n    //         isDeleted: false\r\n    //     };\r\n\r\n    //     this._teacher.push(teacher);\r\n    //     return Promise.resolve(teacher);\r\n    // }\r\n\r\n    // public updateTeacher(id: string, firstName: string, lastName: string, dateOfBirth: string, sex: string, address: string): Promise<void> {\r\n    //     given(id, \"id\").ensureHasValue().ensureIsString();\r\n    //     given(firstName, \"firstName\").ensureHasValue().ensureIsString();\r\n    //     given(lastName, \"lastName\").ensureIsString();\r\n    //     given(dateOfBirth, \"dateOfBirth\").ensureHasValue().ensureIsString();\r\n    //     given(sex, \"sex\").ensureIsString();\r\n    //     given(address, \"address\").ensureIsString();\r\n\r\n    //     const teacher = this._teacher.find(t => t.id === id);\r\n    //     teacher.firstName = firstName;\r\n    //     teacher.lastName = lastName;\r\n    //     teacher.dateOfBirth = dateOfBirth;\r\n    //     teacher.address = address;\r\n    //     teacher.sex = sex;\r\n\r\n    //     return Promise.resolve();\r\n    // }\r\n\r\n     \r\n    // public deleteTeacher(id: string): Promise<void> {\r\n    //     given(id, \"id\").ensureHasValue().ensureIsString();\r\n\r\n    //     const teacher = this._teacher.find(t => t.id === id);\r\n    //     teacher.isDeleted = true;\r\n\r\n    //     return Promise.resolve();\r\n    // }\r\n}"]}