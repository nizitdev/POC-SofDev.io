{"version":3,"file":"remote-teacher-service.js","sourceRoot":"","sources":["remote-teacher-service.ts"],"names":[],"mappings":"","sourcesContent":["\r\n// import { TeacherService } from \"./teacher-service\";\r\n// import { Teacher } from \"../../../models/school/user\";\r\n// import { ConfigurationManager } from \"@nivinjoseph/n-config\";\r\n// import * as Axios from \"axios\";\r\n// import { given } from \"@nivinjoseph/n-defensive\";\r\n// import \"@nivinjoseph/n-ext\";\r\n// import { inject } from \"@nivinjoseph/n-ject\";\r\n// import { DialogService } from \"@nivinjoseph/n-app\";\r\n\r\n\r\n// @inject(\"DialogService\")\r\n// export class RemoteTeacherService implements TeacherService {\r\n//     private readonly _dialogService: DialogService;\r\n//     private readonly _api: Axios.AxiosInstance;\r\n\r\n\r\n//     public constructor(dialogService: DialogService) {\r\n//         given(dialogService, \"dialogService\").ensureHasValue().ensureIsObject();\r\n\r\n//         this._dialogService = dialogService;\r\n\r\n//         let apiUrl = ConfigurationManager.getConfig<string>(\"apiUrl\").trim();\r\n//         if (!apiUrl.endsWith(\"/\"))\r\n//             apiUrl += \"/\";\r\n\r\n//         this._api = Axios.default.create({\r\n//             timeout: 60000,\r\n//             baseURL: apiUrl\r\n//         });\r\n//     }\r\n\r\n\r\n//     public async getTeachers(): Promise<ReadonlyArray<Teacher>> {\r\n//         this._dialogService.showLoadingScreen();\r\n//         try {\r\n//             const response = await this._api.get<ReadonlyArray<Teacher>>(\"api/query/getAllTeachers\");\r\n//             return response.data.map(t => {\r\n//                 t.isDeleted = false;\r\n//                 return t;\r\n//             });\r\n//         }\r\n//         catch (error) {\r\n//             this.showErrorMessage(error.response.status);\r\n//             throw error;\r\n//         }\r\n//         finally {\r\n//             this._dialogService.hideLoadingScreen();\r\n//         }\r\n//     }\r\n\r\n//     public async getTeacher(id: string): Promise<Teacher> {\r\n//         given(id, \"id\").ensureHasValue().ensureIsString();\r\n\r\n//         this._dialogService.showLoadingScreen();\r\n//         try {\r\n//             const response = await this._api.get(`api/query/getTeacher/${id.trim().toLowerCase()}`);\r\n//             const todo: Teacher = response.data;\r\n//             todo.isDeleted = false;\r\n//             return todo;\r\n//         }\r\n//         catch (error) {\r\n//             this.showErrorMessage(error.response.status);\r\n//             throw error;\r\n//         }\r\n//         finally {\r\n//             this._dialogService.hideLoadingScreen();\r\n//         }\r\n//     }\r\n\r\n//     public async createTeacher(name: string,  sex: string): Promise<Teacher> {\r\n//         given(name, \"name\").ensureHasValue().ensureIsString();\r\n//         given(sex, \"sex\").ensureIsString();\r\n\r\n//         const command = {\r\n//             title: name.trim(),\r\n//             sex: sex ? sex.trim() : \"\"\r\n//         };\r\n\r\n//         this._dialogService.showLoadingScreen();\r\n//         try {\r\n//             const response = await this._api.post(\"api/command/createTeacher\", command);\r\n//             this._dialogService.showSuccessMessage(\"Successfully created Teacher.\");\r\n//             const teacher: Teacher = response.data;\r\n//             teacher.isDeleted = false;\r\n//             return teacher;\r\n//         }\r\n//         catch (error) {\r\n//             this.showErrorMessage(error.response.status);\r\n//             throw error;\r\n//         }\r\n//         finally {\r\n//             this._dialogService.hideLoadingScreen();\r\n//         }\r\n//     }\r\n\r\n//     public async updateTeacher(id: string, name: string,  sex: string): Promise<void> {\r\n//         given(id, \"id\").ensureHasValue().ensureIsString();\r\n//         given(name, \"name\").ensureHasValue().ensureIsString();\r\n//         given(sex, \"sex\").ensureIsString();\r\n\r\n\r\n//         const command = {\r\n//             id: id.trim().toLowerCase(),\r\n//             name: name.trim(),\r\n//             sex: sex ? sex.trim() : \"\"\r\n//         };\r\n\r\n//         this._dialogService.showLoadingScreen();\r\n//         try {\r\n//             // @ts-ignore\r\n//             const response = await this._api.post(\"api/command/updateTeacher\", command);\r\n//             this._dialogService.showSuccessMessage(\"Successfully updated Teacher.\");\r\n//         }\r\n//         catch (error) {\r\n//             this.showErrorMessage(error.response.status);\r\n//             throw error;\r\n//         }\r\n//         finally {\r\n//             this._dialogService.hideLoadingScreen();\r\n//         }\r\n//     }\r\n\r\n//     public async deleteTeacher(id: string): Promise<void> {\r\n//         given(id, \"id\").ensureHasValue().ensureIsString();\r\n\r\n//         const command = {\r\n//             id: id.trim().toLowerCase()\r\n//         };\r\n\r\n//         this._dialogService.showLoadingScreen();\r\n//         try {\r\n//             // @ts-ignore\r\n//             const response = await this._api.post(\"api/command/deleteTeacher\", command);\r\n//             this._dialogService.showSuccessMessage(\"Successfully deleted Teacher.\");\r\n//         }\r\n//         catch (error) {\r\n//             this.showErrorMessage(error.response.status);\r\n//             throw error;\r\n//         }\r\n//         finally {\r\n//             this._dialogService.hideLoadingScreen();\r\n//         }\r\n//     }\r\n\r\n\r\n//     private showErrorMessage(status: number): void {\r\n//         this._dialogService.showErrorMessage(`There was an error while processing your request. Code ${status}.`);\r\n//     }\r\n// }"]}