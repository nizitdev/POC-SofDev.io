{"version":3,"file":"local-contact-service.js","sourceRoot":"","sources":["local-contact-service.ts"],"names":[],"mappings":"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","sourcesContent":["import { ContactService } from \"./contact-service\";\nimport { Contact } from \"../../models/contact\";\nimport { given } from \"@nivinjoseph/n-defensive\";\n\n\nexport class LocalContactService implements ContactService\n{\n    private readonly _contact: Array<Contact>;\n    private _counter: number;\n    \n    \n    public constructor()\n    {\n        const contacts = new Array<Contact>();\n        const count = 10;\n        \n        for (let i = 0; i < count; i++)\n        {\n            contacts.push({\n                id: \"id\" + i,\n                firstName: \"firstName\" + i,\n                lastName: \"lastName\" + i,\n                isDeleted: false,\n                email: \"email\" + i,\n                phoneNo: \"phoneNo\" + i,\n                \n            });\n        }\n        \n        this._contact = contacts;\n        this._counter = count;\n    }\n    \n    \n    public getContacts(): Promise<ReadonlyArray<Contact>>\n    {\n        return Promise.resolve(this._contact);\n    }\n    \n    public getContact(id: string): Promise<Contact>\n    {\n        given(id, \"id\").ensureHasValue().ensureIsString();\n        \n        return Promise.resolve(this._contact.find(t => t.id === id));\n    }\n    public searchContacts(text: string): Promise<ReadonlyArray<Contact>>\n    {\n        given(text, \"text\").ensureHasValue().ensureIsString();\n\n        return Promise.resolve(this._contact.filter(t => t.firstName === text));\n    }\n    public createContact(firstName: string, lastName: string, phoneNo:  string, email: string): Promise<Contact>\n    {\n       \n        const contact: Contact = {\n            id: \"id\" + this._counter,\n            firstName:  firstName,\n            lastName: lastName,\n            phoneNo: phoneNo,\n            email: email,\n            isDeleted: false,\n            \n        };\n        \n        this._contact.push(contact);\n        return Promise.resolve(contact);\n    }\n    \n    public updateContact(id: string, firstName: string, lastName: string, phoneNo:  string, email: string): Promise<void>\n    {\n        given(id, \"id\").ensureHasValue().ensureIsString();\n        given(firstName, \"firstName\").ensureHasValue().ensureIsString();\n        given(lastName, \"lastName\").ensureIsString();\n        given(phoneNo, \"phoneNo\").ensureIsString();\n        given(email, \"email\").ensureIsString();\n        const contact = this._contact.find(t => t.id === id);\n        contact.firstName = firstName;\n        contact.lastName = lastName;\n        contact.phoneNo = phoneNo;\n        contact.email = email;\n        \n        return Promise.resolve();\n    }\n    \n     \n    \n    public deleteContact(id: string): Promise<void>\n    {\n        given(id, \"id\").ensureHasValue().ensureIsString();\n        \n        const contact = this._contact.find(t => t.id === id);\n        contact.isDeleted = true;\n\n        return Promise.resolve();\n    }\n}"]}