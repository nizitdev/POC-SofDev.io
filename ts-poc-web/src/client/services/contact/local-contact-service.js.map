{"version":3,"file":"local-contact-service.js","sourceRoot":"","sources":["local-contact-service.ts"],"names":[],"mappings":"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","sourcesContent":["import { ContactService } from \"./contact-service\";\r\nimport { Contact } from \"../../models/contact\";\r\nimport { given } from \"@nivinjoseph/n-defensive\";\r\n\r\n\r\nexport class LocalContactService implements ContactService\r\n{\r\n    private readonly _contact: Array<Contact>;\r\n    private _counter: number;\r\n    \r\n    \r\n    public constructor()\r\n    {\r\n        const contacts = new Array<Contact>();\r\n        const count = 10;\r\n        \r\n        for (let i = 0; i < count; i++)\r\n        {\r\n            contacts.push({\r\n                id: \"id\" + i,\r\n                firstName: \"firstName\" + i,\r\n                lastName: \"lastName\" + i,\r\n                isDeleted: false,\r\n                email: \"email\" + i,\r\n                phoneNo: \"phoneNo\" + i,\r\n                \r\n            });\r\n        }\r\n        \r\n        this._contact = contacts;\r\n        this._counter = count;\r\n    }\r\n    \r\n    \r\n    public getContacts(): Promise<ReadonlyArray<Contact>>\r\n    {\r\n        return Promise.resolve(this._contact);\r\n    }\r\n    \r\n    public getContact(id: string): Promise<Contact>\r\n    {\r\n        given(id, \"id\").ensureHasValue().ensureIsString();\r\n        \r\n        return Promise.resolve(this._contact.find(t => t.id === id));\r\n    }\r\n    public searchContacts(text: string): Promise<ReadonlyArray<Contact>>\r\n    {\r\n        given(text, \"text\").ensureHasValue().ensureIsString();\r\n\r\n        return Promise.resolve(this._contact.filter(t => t.firstName === text));\r\n    }\r\n    public createContact(firstName: string, lastName: string, phoneNo:  string, email: string): Promise<Contact>\r\n    {\r\n       \r\n        const contact: Contact = {\r\n            id: \"id\" + this._counter,\r\n            firstName:  firstName,\r\n            lastName: lastName,\r\n            phoneNo: phoneNo,\r\n            email: email,\r\n            isDeleted: false,\r\n            \r\n        };\r\n        \r\n        this._contact.push(contact);\r\n        return Promise.resolve(contact);\r\n    }\r\n    \r\n    public updateContact(id: string, firstName: string, lastName: string, phoneNo:  string, email: string): Promise<void>\r\n    {\r\n        given(id, \"id\").ensureHasValue().ensureIsString();\r\n        given(firstName, \"firstName\").ensureHasValue().ensureIsString();\r\n        given(lastName, \"lastName\").ensureIsString();\r\n        given(phoneNo, \"phoneNo\").ensureIsString();\r\n        given(email, \"email\").ensureIsString();\r\n        const contact = this._contact.find(t => t.id === id);\r\n        contact.firstName = firstName;\r\n        contact.lastName = lastName;\r\n        contact.phoneNo = phoneNo;\r\n        contact.email = email;\r\n        \r\n        return Promise.resolve();\r\n    }\r\n    \r\n     \r\n    \r\n    public deleteContact(id: string): Promise<void>\r\n    {\r\n        given(id, \"id\").ensureHasValue().ensureIsString();\r\n        \r\n        const contact = this._contact.find(t => t.id === id);\r\n        contact.isDeleted = true;\r\n\r\n        return Promise.resolve();\r\n    }\r\n}"]}