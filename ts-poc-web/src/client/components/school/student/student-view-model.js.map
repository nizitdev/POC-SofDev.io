{"version":3,"file":"student-view-model.js","sourceRoot":"","sources":["student-view-model.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,8CAAoG;AACpG,0DAAiD;AACjD,gDAA6C;AAG7C,gDAAgD;AAChD,+BAA6B;AAM7B,IAAa,gBAAgB,GAA7B,MAAa,gBAAiB,SAAQ,0BAAkB;IASpD,YAAmB,cAA8B,EAAE,iBAAoC;QAEnF,KAAK,EAAE,CAAC;QACR,mBAAK,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;QAC1E,mBAAK,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;QAChF,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;QACtC,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;IAChD,CAAC;IAXD,IAAW,OAAO;QAEjB,OAAO,IAAI,CAAC,QAAQ,CAAU,OAAO,CAAC,CAAC;IACxC,CAAC;IAWM,WAAW;QAEd,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,EAAG,EAAE,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;IACrF,CAAC;IAEM,aAAa;QAEhB,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;aAC9C,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC;aACzC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC;CACJ,CAAA;AA9BY,gBAAgB;IAJ5B,gBAAQ,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;IACxC,eAAO,CAAC,aAAa,CAAC;IACtB,YAAI,CAAC,OAAO,CAAC;IACb,eAAM,CAAC,gBAAgB,EAAE,mBAAmB,CAAC;;GACjC,gBAAgB,CA8B5B;AA9BY,4CAAgB","sourcesContent":["import { ComponentViewModel, template, element, bind, NavigationService } from \"@nivinjoseph/n-app\";\r\nimport { given } from \"@nivinjoseph/n-defensive\";\r\nimport { inject } from \"@nivinjoseph/n-ject\";\r\nimport { TeacherService } from \"../../../services/school/teacher/teacher-service\";\r\nimport { Student } from \"../../../models/school/student\";\r\nimport * as Routes from \"../../../pages/routes\";\r\nimport \"./student-view.scss\";\r\n\r\n@template(require(\"./student-view.html\"))\r\n@element(\"studentElem\")\r\n@bind(\"value\")  \r\n@inject(\"TeacherService\", \"NavigationService\")\r\nexport class TeacherViewModel extends ComponentViewModel\r\n{\r\n    private readonly _teacherService: TeacherService;\r\n    private readonly _navigationService: NavigationService;\r\n     \r\n    public get teacher(): Student {\r\n      \r\n     return this.getBound<Student>(\"value\"); \r\n    }\r\n    public constructor(teacherService: TeacherService, navigationService: NavigationService)\r\n    {\r\n        super();\r\n        given(teacherService, \"teacherService\").ensureHasValue().ensureIsObject();\r\n        given(navigationService, \"navigationService\").ensureHasValue().ensureIsObject();\r\n        this._teacherService = teacherService;\r\n        this._navigationService = navigationService;\r\n    }\r\n    \r\n    \r\n    public editTeacher(): void\r\n    {\r\n        this._navigationService.navigate(Routes.manageTeacher , { id: this.teacher.id });\r\n    }\r\n    \r\n    public deleteTeacher(): void\r\n    {\r\n        this._teacherService.deleteTeacher(this.teacher.id)\r\n            .then(() => this.teacher.isDeleted = true)\r\n            .catch(e => console.log(e));\r\n    }\r\n}"]}