{"version":3,"file":"contact-view-model.js","sourceRoot":"","sources":["contact-view-model.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,8CAAoG;AACpG,+BAA6B;AAE7B,gDAA6C;AAE7C,0DAAiD;AACjD,6CAA6C;AAO7C,IAAa,gBAAgB,GAA7B,MAAa,gBAAiB,SAAQ,0BAAkB;IASpD,YAAmB,cAA8B,EAAE,iBAAoC;QAEnF,KAAK,EAAE,CAAC;QACR,mBAAK,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;QAC1E,mBAAK,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;QAChF,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;QACtC,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;IAChD,CAAC;IAVD,IAAW,OAAO,KAAc,OAAO,IAAI,CAAC,QAAQ,CAAU,OAAO,CAAC,CAAC,CAAC,CAAC;IAYlE,WAAW;QAEd,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;IACpF,CAAC;IAMM,aAAa;QAEhB,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;aAC9C,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC;aACzC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC;CAEJ,CAAA;AAlCY,gBAAgB;IAJ5B,gBAAQ,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;IACxC,eAAO,CAAC,SAAS,CAAC;IAClB,YAAI,CAAC,OAAO,CAAC;IACb,eAAM,CAAC,gBAAgB,EAAE,mBAAmB,CAAC;;GACjC,gBAAgB,CAkC5B;AAlCY,4CAAgB","sourcesContent":["import { ComponentViewModel, template, element, bind, NavigationService } from \"@nivinjoseph/n-app\";\nimport \"./contact-view.scss\";\nimport { Contact } from \"../../models/contact\";\nimport { inject } from \"@nivinjoseph/n-ject\";\nimport { ContactService } from \"../../services/todo/contact-service\";\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport * as Routes from \"../../pages/routes\";\n\n\n@template(require(\"./contact-view.html\"))\n@element(\"contact\")\n@bind(\"value\") \n@inject(\"ContactService\", \"NavigationService\")\nexport class ContactViewModel extends ComponentViewModel\n{\n    private readonly _contactService: ContactService;\n    private readonly _navigationService: NavigationService;\n    \n    \n    public get contact(): Contact { return this.getBound<Contact>(\"value\"); }\n    \n    \n    public constructor(contactService: ContactService, navigationService: NavigationService)\n    {\n        super();\n        given(contactService, \"contactService\").ensureHasValue().ensureIsObject();\n        given(navigationService, \"navigationService\").ensureHasValue().ensureIsObject();\n        this._contactService = contactService;\n        this._navigationService = navigationService;\n    }\n    \n    public editContact(): void\n    {\n        this._navigationService.navigate(Routes.manageContact, { id: this.contact.id });\n    }\n    \n   \n    \n     \n    \n    public deleteContact(): void\n    {\n        this._contactService.deleteContact(this.contact.id)\n            .then(() => this.contact.isDeleted = true)\n            .catch(e => console.log(e));\n    }\n    \n}"]}